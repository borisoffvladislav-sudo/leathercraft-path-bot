diff --git a/routers/start.py b/routers/start.py
index abcdef1..2345678 100644
--- a/routers/start.py
+++ b/routers/start.py
@@ -10,6 +10,19 @@ from aiogram import types
 from utils.db_utils import get_user, update_user_progress
 from keyboards.main_menu import main_menu_kb
+
+async def save_progress(user_id, step, inventory, balance):
+    """
+    Сохраняем прогресс игрока в базу данных.
+    Вызывается после каждого действия.
+    """
+    await update_user_progress(user_id, step=step, inventory=inventory, balance=balance)
+
+async def restore_progress(message: types.Message, user):
+    """
+    Отправляет игрока на последний сохраненный этап.
+    Динамическая функция — поддерживает любые будущие шаги.
+    """
+    step = user.current_step
+    inventory = user.inventory
+    balance = user.balance
+    await message.answer(f"Вы возвращены на последний этап: {step}\nИнвентарь: {inventory}\nМонеты: {balance}",
+                         reply_markup=main_menu_kb())
@@ -45,10 +58,21 @@ async def start_game(message: types.Message, state: FSMContext):
-    # Существующая логика "Продолжить игру"
-    # возвращает игрока на начало ремня
-    await message.answer("Давайте начнем изготовление ремня!", reply_markup=main_menu_kb())
+    # Новая логика "Продолжить игру"
+    user = await get_user(message.from_user.id)
+    if user is None:
+        # Если пользователь не найден — стандартное начало
+        await message.answer("Давайте начнем игру!", reply_markup=main_menu_kb())
+        return
+
+    # Проверяем, есть ли сохраненный шаг
+    last_step = user.current_step
+    if last_step:
+        # Динамически возвращаем игрока на последний шаг
+        await restore_progress(message, user)
+    else:
+        # Если прогресса нет — стандартное начало
+        await message.answer("Давайте начнем игру!", reply_markup=main_menu_kb())
diff --git a/utils/db_utils.py b/utils/db_utils.py
new file mode 100644
index 0000000..3456789
--- /dev/null
+++ b/utils/db_utils.py
@@ -0,0 +1,20 @@
+from database.models import User
+
+async def get_user(user_id):
+    user = await User.get_or_none(user_id=user_id)
+    return user
+
+async def update_user_progress(user_id, step=None, inventory=None, balance=None):
+    """
+    Сохраняет прогресс игрока в базе данных.
+    """
+    user = await get_user(user_id)
+    if not user:
+        return
+    if step is not None:
+        user.current_step = step
+    if inventory is not None:
+        user.inventory = inventory
+    if balance is not None:
+        user.balance = balance
+    await user.save()
