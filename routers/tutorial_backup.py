# routers/tutorial.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Database, tutorial_db
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot
from aiogram.types import Message
import json
import os
import asyncio

tutorial_router = Router()
db = Database()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —ç—Ç–∞–ø–∞–º
@tutorial_router.message(Command("setstage"))
async def set_stage_command(message: Message, state: FSMContext, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID)
    ADMIN_IDS = [1092273052]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]
    
    if len(args) < 2:
        await message.answer(
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setstage [player_id] [stage_name]\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã —ç—Ç–∞–ø–æ–≤:\n"
            "‚Ä¢ waiting_for_shop_enter - –ù–∞—á–∞–ª–æ –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "‚Ä¢ in_shop_menu - –ú–∞–≥–∞–∑–∏–Ω –æ–±—É—á–µ–Ω–∏—è\n"
            "‚Ä¢ waiting_for_belt_start - –ù–∞—á–∞–ª–æ –∫—Ä–∞—Ñ—Ç–∞ —Ä–µ–º–Ω—è\n"
            "‚Ä¢ waiting_for_belt_materials - –í—ã–±–æ—Ä –∫–æ–∂–∏\n"
            "‚Ä¢ in_shop_after_tutorial - –ú–∞–≥–∞–∑–∏–Ω –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è\n"
            "‚Ä¢ waiting_for_holder_start - –ù–∞—á–∞–ª–æ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞\n"
        )
        return
    
    try:
        player_id = int(args[0])
        stage_name = args[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        active_player = db.get_active_player(message.from_user.id)
        if not active_player:
            await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        tutorial_db.update_tutorial_progress(player_id, stage_name)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_class = getattr(TutorialStates, stage_name, None)
        if state_class:
            await state.set_state(state_class)
            await state.update_data(player_id=player_id)
        
        await message.answer(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ {player_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ —ç—Ç–∞–ø: {stage_name}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        all_states = [state for state in TutorialStates.__all_states__]
        states_info = "\n".join([f"‚Ä¢ {state.state}" for state in all_states[:10]])  # –ø–µ—Ä–≤—ã–µ 10
        
        await message.answer(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:\n{states_info}\n... –∏ –¥—Ä—É–≥–∏–µ")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@tutorial_router.message(Command("progress"))
async def check_progress_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    ADMIN_IDS = [1092273052]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    active_player = db.get_active_player(message.from_user.id)
    if not active_player:
        await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    player_id = active_player[0]
    progress = tutorial_db.get_tutorial_progress(player_id)
    
    if progress:
        stage, step, completed, balance = progress
        await message.answer(
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {player_id}:\n"
            f"‚Ä¢ –≠—Ç–∞–ø: {stage}\n"
            f"‚Ä¢ –®–∞–≥: {step}\n"
            f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}"
        )
    else:
        await message.answer("‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ë–µ–ª—ã–µ —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
AVAILABLE_TUTORIAL_ITEMS = {
    "–ù–æ–∂–∏": ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂"],
    "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏": ["–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"],
    "–¢–æ—Ä—Ü–±–∏–ª—ã": ["–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"],
    "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": ["–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞", "–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫"],
    "–§—É—Ä–Ω–∏—Ç—É—Ä–∞": ["–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π"],
    "–ù–∏—Ç–∫–∏": ["–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏"]
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
class TutorialStates(StatesGroup):
    waiting_for_shop_enter = State()
    waiting_for_approach = State()
    waiting_for_oldman_approach = State()
    waiting_for_showcase = State()
    in_shop_menu = State()
    in_shop_category = State()
    waiting_for_exit = State()
     # === –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ö–†–ê–§–¢–ê ===
    waiting_for_belt_start = State()           # –≠—Ç–∞–ø 1 - –°–¥–µ–ª–∞—Ç—å —Ä–µ–º–µ–Ω—å
    waiting_for_belt_materials = State()       # –≠—Ç–∞–ø 2 - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    waiting_for_belt_leather = State()         # –≠—Ç–∞–ø 3 - –í—ã–±–æ—Ä –∫–æ–∂–∏
    waiting_for_belt_hardware = State()        # –≠—Ç–∞–ø 4 - –í—ã–±–æ—Ä —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
    waiting_for_belt_tools = State()           # –≠—Ç–∞–ø 5 - –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    waiting_for_belt_assembly = State()        # –≠—Ç–∞–ø 6 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä—è–∂–∫—É
    waiting_for_belt_quality = State()         # –≠—Ç–∞–ø 7-8 - –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    waiting_for_belt_sleep = State()           # –≠—Ç–∞–ø 9 - –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–ø–∞—Ç—å
    
    waiting_for_shop_return = State()          # –≠—Ç–∞–ø 10 - –í –º–∞–≥–∞–∑–∏–Ω
    waiting_for_shop_view = State()            # –≠—Ç–∞–ø 11 - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—Ç—Ä–∏–Ω—É
    in_shop_after_tutorial = State()           # –≠—Ç–∞–ø 11 - –ú–∞–≥–∞–∑–∏–Ω (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã)
    waiting_for_holder_start = State()         # –≠—Ç–∞–ø 13 - –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å
    waiting_for_holder_leather = State()       # –≠—Ç–∞–ø 14 - –í—ã–±–æ—Ä –∫–æ–∂–∏
    waiting_for_holder_tools = State()         # –≠—Ç–∞–ø 15 - –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    waiting_for_holder_threads = State()       # –≠—Ç–∞–ø 16 - –í—ã–±–æ—Ä –Ω–∏—Ç–æ–∫
    waiting_for_holder_quality = State()       # –≠—Ç–∞–ø 17-18 - –û—Ü–µ–Ω–∏—Ç—å/–ü–æ–¥–∞—Ä–∏—Ç—å
    waiting_for_holder_final = State()         # –≠—Ç–∞–ø 19 - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    # === –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –¢–†–ï–¢–¨–ï–ô –ß–ê–°–¢–ò –û–ë–£–ß–ï–ù–ò–Ø (–°–£–ú–ö–ê) ===
    waiting_for_bag_start = State()              # –≠—Ç–∞–ø 20
    in_shop_bag_materials = State()              # –≠—Ç–∞–ø 21
    waiting_for_bag_materials_selection = State() # –≠—Ç–∞–ø 22
    waiting_for_bag_tools_selection = State()    # –≠—Ç–∞–ø 23
    waiting_for_bag_wax_selection = State()      # –≠—Ç–∞–ø 24
    waiting_for_bag_threads_selection = State()  # –≠—Ç–∞–ø 25
    waiting_for_bag_quality_1 = State()          # –≠—Ç–∞–ø 26-27
    waiting_for_bag_retry = State()              # –≠—Ç–∞–ø 28
    in_shop_bag_retry = State()                  # –≠—Ç–∞–ø 29
    waiting_for_bag_retry_start = State()        # –≠—Ç–∞–ø 30
    waiting_for_bag_retry_materials = State()    # –≠—Ç–∞–ø 31
    waiting_for_bag_retry_tools = State()        # –≠—Ç–∞–ø 32
    waiting_for_bag_retry_wax = State()          # –≠—Ç–∞–ø 33
    waiting_for_bag_retry_threads = State()      # –≠—Ç–∞–ø 34
    waiting_for_bag_quality_2 = State()          # –≠—Ç–∞–ø 35-36
    waiting_for_final = State()                  # –≠—Ç–∞–ø 37

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
def get_tutorial_start_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ó–∞–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="enter_shop")]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ö–æ–¥–∞ –∫ –º—É–∂–∏—á–∫—É
def get_approach_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë£ –ü–æ–¥–æ–π—Ç–∏ –ø–æ–±–ª–∏–∂–µ", callback_data="approach_closer")]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ö–æ–¥–∞ –∫ –ì–µ–Ω–µ
def get_oldman_approach_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëã –ü–æ–¥–æ–π—Ç–∏ –∫ –º—É–∂–∏—á–∫—É", callback_data="approach_oldman")]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏—Ç—Ä–∏–Ω—ã
def get_showcase_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∏—Ç—Ä–∏–Ω—É", callback_data="view_showcase")]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
def get_shop_menu_keyboard(balance=2000):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî™ –ù–æ–∂–∏", callback_data="shop_knives")],
        [InlineKeyboardButton(text="üï≥Ô∏è –ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", callback_data="shop_punches")],
        [InlineKeyboardButton(text="üîß –¢–æ—Ä—Ü–±–∏–ª—ã", callback_data="shop_edges")],
        [InlineKeyboardButton(text="üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="shop_materials")],
        [InlineKeyboardButton(text="üìé –§—É—Ä–Ω–∏—Ç—É—Ä–∞", callback_data="shop_hardware")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", callback_data="shop_exit")]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å —Ä–µ–º–µ–Ω—å"
def get_make_belt_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî® –°–¥–µ–ª–∞—Ç—å —Ä–µ–º–µ–Ω—å", callback_data="make_belt")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å —Ä–µ–º–µ–Ω—å" - –≠—Ç–∞–ø 1
@tutorial_router.callback_query(F.data == "make_belt")
async def make_belt_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 1"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ make_belt –≤—ã–∑–≤–∞–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        # –ï—Å–ª–∏ player_id –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
        active_player = db.get_active_player(callback.from_user.id)
        if active_player:
            player_id = active_player[0]
            await state.update_data(player_id=player_id)
            print(f"‚úÖ player_id –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î: {player_id}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_start")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 1
    stage1_text = (
        "–í–µ—Ä–Ω—É–≤—à–∏—Å—å –¥–æ–º–æ–π, –≤—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –î–æ–ª–≥–æ –∏–≥—Ä–∞–ª–∏—Å—å —Å –Ω–∞—Å–∞–¥–∫–∞–º–∏ –º—É–ª—å—Ç–∏—Ç—É–ª–∞, "
        "—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏. –†–µ–º–µ–Ω–Ω—É—é –ª–µ–Ω—Ç—É –∫—Ä—É—Ç–∏–ª–∏ –≤ —Ä—É–∫–∞—Ö: –ø—ã—Ç–∞–ª–∏—Å—å —Ä–∞—Å—Ç—è–Ω—É—Ç—å, –Ω–∞–º–∞—Ç—ã–≤–∞–ª–∏ "
        "–Ω–∞ –ª–æ–∫–æ—Ç—å, –ø—Ä–∏–∫–∏–¥—ã–≤–∞–ª–∏ –ø–æ —Ç–∞–ª–∏–∏.\n\n"
        "–ù–∞–∏–≥—Ä–∞–≤—à–∏—Å—å, –≤–∫–ª—é—á–∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞ Youtube, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –ì–µ–Ω–∞, –∏ —Å—Ç–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞ –≤–µ–¥—É—â–∏–º."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage1_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="belt_prepare_materials")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 1
    image_path = "images/tutorial/belt_start.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage1_text,
            reply_markup=stage1_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await callback.message.answer(
            stage1_text,
            reply_markup=stage1_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_belt_start)
    await callback.answer()
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_belt_start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤" - –≠—Ç–∞–ø 2
@tutorial_router.callback_query(F.data == "belt_prepare_materials")
async def belt_prepare_materials(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 2"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: belt_prepare_materials –≤—ã–∑–≤–∞–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_materials")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 2
    stage2_text = (
        "–ë–ª–æ–≥–≥–µ—Ä –Ω–∞—á–∞–ª —Å –¥—É—à–Ω–æ–π –ª–µ–∫—Ü–∏–∏, –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–µ–Ω—Ç—É. –ß–µ–º –¥–µ—à–µ–≤—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –¥–æ—Ä–æ–≥–∏—Ö "
        "–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ —É—Ä–µ–∑—ã. –û—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–æ –ø—Ä—è–∂–∫–∏ –∏ –≤–∏–Ω—Ç—ã. –í—ã –±—ã –∫—É–ø–∏–ª–∏ –¥–æ—Ä–æ–≥–∏–µ –ª–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω–µ –±–æ—è–ª–∏—Å—å –∏—Ö –∏—Å–ø–æ—Ä—Ç–∏—Ç—å.\n\n"
        "–í–æ–∑—å–º–∏—Ç–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n"
        "- –°–µ–π—á–∞—Å —É –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –ª–µ–Ω—Ç–∞. –í –±—É–¥—É—â–µ–º —É –≤–∞—Å –∏—Ö –±—É–¥–µ—Ç –±–æ–ª—å—à–µ "
        "–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –ª–µ–Ω—Ç–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    leather_items = [item[0] for item in inventory if "—Ä–µ–º–µ–Ω–Ω–∞—è" in item[0].lower()]
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω—ã –∫–æ–∂–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {leather_items}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–∂–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for item_name in leather_items:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback_data
        if item_name == "–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞":
            callback_data = "select_leather_cheap"  # ‚úÖ –ö–û–†–û–¢–ö–ò–ô callback_data
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–∂ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            short_name = item_name.lower().replace(' ', '_').replace('–¥–µ—à–µ–≤–∞—è', 'cheap').replace('—Ä–µ–º–µ–Ω–Ω–∞—è', 'belt').replace('–∑–∞–≥–æ—Ç–æ–≤–∫–∞', 'leather')[:20]
            callback_data = f"select_leather_{short_name}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üßµ {item_name}", 
            callback_data=callback_data  # ‚úÖ –ö–û–†–û–¢–ö–ò–ô callback_data
        )])
    
    stage2_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    print(f"‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {[btn[0].text for btn in keyboard_buttons]}")
    print(f"‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: Callback_data: {[btn[0].callback_data for btn in keyboard_buttons]}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 2
    image_path = "images/tutorial/belt_materials.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage2_text,
            reply_markup=stage2_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ
        try:
            await callback.message.answer(
                stage2_text,
                reply_markup=stage2_keyboard
            )
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
        except Exception as e2:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e2}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_belt_leather)
    await callback.answer()
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_belt_leather")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–∂–∏ –¥–ª—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 3
@tutorial_router.callback_query(F.data.startswith("select_leather_"))
async def select_belt_leather(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–∂–∏ –¥–ª—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 3"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: select_belt_leather –≤—ã–∑–≤–∞–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –∫–æ–∂–∏ –∏–∑ callback_data
    leather_code = callback.data.replace("select_leather_", "")
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∫–æ–∂–∏: {leather_code}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ –≤ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    leather_map = {
        "cheap": "–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞",
        # –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
    
    leather_name = leather_map.get(leather_code, "–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –í—ã–±—Ä–∞–Ω–∞ –∫–æ–∂–∞: {leather_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–∂—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_leather=leather_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_leather")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 3
    stage3_text = "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    hardware_items = [item[0] for item in inventory if "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞" in item[0].lower()]
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {hardware_items}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ñ—É—Ä–Ω–∏—Ç—É—Ä–æ–π (—Ç–æ–∂–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ callback_data)
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for item_name in hardware_items:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback_data –¥–ª—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        if item_name == "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π":
            callback_data = "select_hardware_cheap"
        else:
            callback_data = f"select_hardware_{item_name.replace(' ', '_').lower()[:15]}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üìé {item_name}", 
            callback_data=callback_data
        )])
    
    stage3_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    print(f"‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã: {[btn[0].text for btn in keyboard_buttons]}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 3
    image_path = "images/tutorial/belt_hardware.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage3_text,
            reply_markup=stage3_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 3 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer(
            stage3_text,
            reply_markup=stage3_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 3 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_belt_hardware)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {leather_name}")
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_belt_hardware")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –¥–ª—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 4
@tutorial_router.callback_query(F.data.startswith("select_hardware_"))
async def select_belt_hardware(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –¥–ª—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 4"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
    hardware_name = callback.data.replace("select_hardware_", "").replace("_", " ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_hardware=hardware_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_hardware")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 4
    stage4_text = (
        "–ë–ª–æ–≥–≥–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–ª –æ–≤–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏, "
        "–æ—Ç—Å–µ–∫–∞—Ç–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Ü–æ–≤ —Ä–µ–º–Ω—è, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—Å–µ —Ä–∞–∑–º–µ—á–∞—Ç—å –º–æ–∂–Ω–æ. –í—ã –≤–∏–¥–µ–ª–∏ –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ, "
        "–¥–∞ –ø–æ–∫–∞ —Ä–µ—à–∏–ª–∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å—Å—è.\n\n"
        "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage4_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="belt_select_tools")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 4
    image_path = "images/tutorial/belt_tools.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage4_text,
            reply_markup=stage4_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage4_text,
            reply_markup=stage4_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_belt_tools)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {hardware_name}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" - –≠—Ç–∞–ø 5
@tutorial_router.callback_query(F.data == "belt_select_tools")
async def belt_select_tools(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 5"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_tools")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tool_items = []
    for item in inventory:
        item_name = item[0]
        # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª", "—Ç–æ—Ä—Ü–±–∏–ª"]):
            tool_items.append(item_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_tools=[])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for tool_name in tool_items:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üîò {tool_name}", 
            callback_data=f"toggle_tool_{tool_name.replace(' ', '_')}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
        callback_data="tools_not_selected"
    )])
    
    tools_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 5
    stage5_text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ, –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–µ–≥–æ –µ—Å—Ç—å.\n\n"
        "–ü–æ –º–µ—Ä–µ –≤—ã–±–æ—Ä–∞, —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫ —Å –∫—Ä–∞—Å–Ω—ã–º –∫—Ä—É–∂–∫–æ–º –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –∑–µ–ª–µ–Ω—É—é –≥–∞–ª–æ—á–∫—É. "
        "–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ ‚Äì –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–Ω–æ–∂, –º—É–ª—å—Ç–∏—Ç—É–ª –∏ –≤—ã—Å–µ—á–Ω–æ–π –ø—Ä–æ–±–æ–π–Ω–∏–∫) –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 5
    image_path = "images/tutorial/tools_selection.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage5_text,
            reply_markup=tools_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage5_text,
            reply_markup=tools_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    await state.set_state(TutorialStates.waiting_for_belt_tools)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≠—Ç–∞–ø 5
@tutorial_router.callback_query(F.data.startswith("toggle_tool_"))
async def toggle_tool_selection(callback: CallbackQuery, state: FSMContext):
    """Toggle –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    tool_name = callback.data.replace("toggle_tool_", "").replace("_", " ")
    
    # Toggle –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if tool_name in selected_tools:
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        selected_tools.remove(tool_name)
        await callback.answer(f"‚ùå {tool_name} - –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        selected_tools.append(tool_name)
        await callback.answer(f"‚úÖ {tool_name} - –≤—ã–±—Ä–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_tools=selected_tools)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    tool_items = []
    for item in inventory:
        item_name = item[0]
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª", "—Ç–æ—Ä—Ü–±–∏–ª"]):
            tool_items.append(item_name)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for tool_name in tool_items:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        emoji = "‚úÖ" if tool_name in selected_tools else "üîò"
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"{emoji} {tool_name}", 
            callback_data=f"toggle_tool_{tool_name.replace(' ', '_')}"
        )])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"]
    all_required_selected = all(tool in selected_tools for tool in required_tools)
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
    if all_required_selected:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            callback_data="belt_tools_confirmed"
        )])
    else:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
            callback_data="tools_not_selected"
        )])
    
    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
        await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
@tutorial_router.callback_query(F.data == "tools_not_selected")
async def tools_not_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_tools = data.get('selected_tools', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"]
    missing_tools = [tool for tool in required_tools if tool not in selected_tools]
    
    if missing_tools:
        missing_text = ", ".join(missing_tools)
        await callback.answer(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã: {missing_text}", show_alert=True)
    else:
        await callback.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≠—Ç–∞–ø 6
@tutorial_router.callback_query(F.data == "belt_tools_confirmed")
async def belt_tools_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä–∫–µ - –≠—Ç–∞–ø 6"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"]
    if not all(tool in selected_tools for tool in required_tools):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_assembly")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 6
    stage6_text = (
        "–í—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ —Ä–∞–±–æ—Ç–µ, –ø–æ–≤—Ç–æ—Ä—è—è –≤—Å–µ –∑–∞ –±–ª–æ–≥–≥–µ—Ä–æ–º. –ù–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ, –≤ –∂–∏–∑–Ω–∏ –≤—Å–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Å–ª–æ–∂–Ω–µ–µ —á–µ–º –Ω–∞ –≤–∏–¥–µ–æ. "
        "–ü—Ä–æ—Ä–µ–∑–∞—Ç—å –ª–µ–Ω—Ç—É –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–º –Ω–æ–∂–æ–º –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ. –ú—É–ª—å—Ç–∏—Ç—É–ª —Å–Ω–∏–º–∞–ª —Ñ–∞—Å–∫—É —Å —Ç—Ä—É–¥–æ–º, –∑–∞–¥–∏—Ä–∞—è –º–µ—Å—Ç–∞–º–∏ –∫–æ–∂—É. "
        "–ò–Ω–æ–≥–¥–∞ –æ–Ω –≤—Ä–µ–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –≤–≥–ª—É–±—å –ª–µ–Ω—Ç—ã, –∏ –≤—ã –¥—É–º–∞–ª–∏, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –µ–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å.\n\n"
        "–®–∞–≥ –∑–∞ —à–∞–≥–æ–º, –≤—ã –ø–æ–≤—Ç–æ—Ä—è–ª–∏ –¥–≤–∏–∂–µ–Ω–∏—è: –ø–æ–ª–∏—Ä–æ–≤–∞–ª–∏ –∫—Ä–∞—è –∏ –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä—è–∂–∫—É"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä—è–∂–∫–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage6_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî© –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä—è–∂–∫—É", callback_data="belt_install_buckle")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 6
    image_path = "images/tutorial/belt_assembly.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage6_text,
            reply_markup=stage6_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage6_text,
            reply_markup=stage6_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_belt_assembly)
    await callback.answer("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä—è–∂–∫—É" - –≠—Ç–∞–ø 7
@tutorial_router.callback_query(F.data == "belt_install_buckle")
async def belt_install_buckle(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä—è–∂–∫–∏ –Ω–∞ —Ä–µ–º–µ–Ω—å - –≠—Ç–∞–ø 7"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_quality")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 7
    stage7_text = (
        "–¢–æ–ª–∏ –≤–∏–Ω—Ç–∏–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ç–æ–ª–∏ –≤—ã —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –Ω–µ —Ç–∞–∫, –Ω–æ —É –≤–∞—Å —É—à–ª–æ –æ–∫–æ–ª–æ 20 –º–∏–Ω—É—Ç "
        "–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä—è–∂–∫–∏ –∏ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ –≤–∏–Ω—Ç–æ–≤."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage7_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="belt_evaluate_quality")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 7
    image_path = "images/tutorial/belt_buckle.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage7_text,
            reply_markup=stage7_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage7_text,
            reply_markup=stage7_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_belt_quality)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç" - –≠—Ç–∞–ø 8
@tutorial_router.callback_query(F.data == "belt_evaluate_quality")
async def belt_evaluate_quality(callback: CallbackQuery, state: FSMContext):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 8"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_belt_sleep")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    quality_text = "üéâ–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞ ‚Äì –°–Ω–æ—Å–Ω–æ–µüéâ"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    image_path = "images/tutorial/quality_snosnoe.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=quality_text
        )
    except Exception as e:
        await callback.message.answer(quality_text)
    
    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await asyncio.sleep(2)
    
    # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    stage8_text = (
        "¬´–ú–æ–≥–ª–æ –±—ã—Ç—å –∏ —Ö—É–∂–µ¬ª ‚Äì –ø–æ–¥—É–º–∞–ª–∏ –≤—ã. –ú–µ—Å—Ç–∞–º–∏ —Ä–µ–∑–∞–Ω—É–ª–∏ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ—Ä—Ü–±–∏–ª–æ–º –ø–æ—Ä–≤–∞–ª–∏ –∫—Ä–∞—è –º–µ—Å—Ç–∞–º–∏. "
        "–û—Ç–≤–µ—Ä—Å—Ç–∏–µ –ø–æ–¥ –ø—Ä—è–∂–∫—É –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Å–æ–µ. –ù–æ –≤ —Ü–µ–ª–æ–º, –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —Ç–µ–ø–ª–æ –Ω–∞ –¥—É—à–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –í–´. "
        "–î–∞ –∫—Ä–∏–≤–æ, –¥–∞ –∫–æ—Å–æ, —É –±–ª–æ–≥–≥–µ—Ä–∞ –Ω–∞ –≤–∏–¥–µ–æ —Å–∏–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, –Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –Ω–µ –ø–ª–æ—Ö–æ.\n\n"
        "–î–æ–≤–æ–ª—å–Ω—ã–µ —Å–æ–±–æ–π –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å–ø–∞—Ç—å"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫–æ —Å–Ω—É
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage8_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üò¥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–ø–∞—Ç—å", callback_data="belt_go_to_sleep")]
    ])
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage8_text,
            reply_markup=stage8_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage8_text,
            reply_markup=stage8_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_belt_sleep)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–ø–∞—Ç—å" - –≠—Ç–∞–ø 9
@tutorial_router.callback_query(F.data == "belt_go_to_sleep")
async def belt_go_to_sleep(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é - –≠—Ç–∞–ø 9"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_shop_return")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 9
    stage9_text = (
        "–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –æ —Ç–æ–º, —á—Ç–æ —Å–∞–º–∏ —Å–¥–µ–ª–∞–ª–∏ —Ä–µ–º–µ–Ω—å. "
        "–ü–æ–∫–∞–∑–∞–ª–∏ –ø–∞—Ä—É —Ñ–æ—Ç–æ –Ω–∞ —Ñ–æ–Ω–µ –æ–±–æ–µ–≤ –∏ –æ–¥–∏–Ω –∏–∑ –¥—Ä—É–∑–µ–π –ø—Ä–µ–¥–ª–æ–∂–∏–ª –µ–º—É —Å–¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä.\n\n"
        "–≠—Ç–æ —É–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ü—Ä–∞–≤–¥–∞ —É –≤–∞—Å –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–æ–∂–∏. –ü–æ—Ä–∞ –≤–Ω–æ–≤—å –≤ –º–∞–≥–∞–∑–∏–Ω."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage9_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="return_to_shop")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 9
    image_path = "images/tutorial/friends_meeting.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage9_text,
            reply_markup=stage9_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage9_text,
            reply_markup=stage9_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_shop_return)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω" - –≠—Ç–∞–ø 10
@tutorial_router.callback_query(F.data == "return_to_shop")
async def return_to_shop(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ—Å–ª–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ä–µ–º–Ω—è - –≠—Ç–∞–ø 10"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_shop_view")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 10
    stage10_text = (
        "–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –°–æ—Ç—Ä—É–¥–Ω–∏—Ü—ã –±–µ–≥–∞—é—Ç —Ç—É–¥–∞-—Å—é–¥–∞, –Ω–µ –æ–±—Ä–∞—â–∞—è –Ω–∞ –≤–∞—Å –≤–Ω–∏–º–∞–Ω–∏–µ. "
        "–£ –∫–∞—Å—Å—ã –ì–µ–Ω–Ω–∞–¥–∏–π –ë–æ—Ä–∏—Å–æ–≤–∏—á, —á—Ç–æ-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ –¥–æ–∫–∞–∑—ã–≤–∞–ª –∫–∞—Å—Å–∏—Ä—É. –ü—Ä–æ—Ö–æ–¥—è –º–∏–º–æ –Ω–µ–≥–æ, "
        "–≤—ã —É—Å–ª—ã—à–∞–ª–∏, —á—Ç–æ –æ–Ω —á—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ –ª–µ—Ç–∞—é—â–∏–π –º–æ–ª–æ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ —ç—Ç–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ —É –Ω–µ–≥–æ –ö–ú–°!"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏—Ç—Ä–∏–Ω—ã
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage10_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—Ç—Ä–∏–Ω—É", callback_data="view_shop_after_tutorial")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 10
    image_path = "images/tutorial/shop_return.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage10_text,
            reply_markup=stage10_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage10_text,
            reply_markup=stage10_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_shop_view)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—Ç—Ä–∏–Ω—É" - –≠—Ç–∞–ø 11 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@tutorial_router.callback_query(F.data == "view_shop_after_tutorial")
async def view_shop_after_tutorial(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏—Ç—Ä–∏–Ω—ã –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è - –≠—Ç–∞–ø 11"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: view_shop_after_tutorial –≤—ã–∑–≤–∞–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "in_shop_after_tutorial")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 2000
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 11
    stage11_text = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞ (–í–°–ï —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã) —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    all_categories = [
        ("üî™ –ù–æ–∂–∏", "shop_after_knives"),
        ("üï≥Ô∏è –ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", "shop_after_punches"), 
        ("üîß –¢–æ—Ä—Ü–±–∏–ª—ã", "shop_after_edges"),
        ("üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "shop_after_materials"),
        ("üìé –§—É—Ä–Ω–∏—Ç—É—Ä–∞", "shop_after_hardware"),
        ("üß∂ –ù–∏—Ç–∫–∏", "shop_after_threads"),  # –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–æ–≤–æ–π –∏–∫–æ–Ω–∫–æ–π
        ("üß™ –•–∏–º–∏—è", "shop_after_chemistry")  # –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–æ–≤–æ–π –∏–∫–æ–Ω–∫–æ–π
    ]
    
    keyboard_buttons = []
    for category_text, callback_data in all_categories:
        keyboard_buttons.append([InlineKeyboardButton(
            text=category_text, 
            callback_data=callback_data
        )])
    
    keyboard_buttons.append([InlineKeyboardButton(
        text="üö™ –í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", 
        callback_data="shop_after_exit"
    )])
    
    shop_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    print(f"‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 11
    image_path = "images/tutorial/shop_after_tutorial.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"{stage11_text}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=shop_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 11 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer(
            f"{stage11_text}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=shop_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 11 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
    await state.set_state(TutorialStates.in_shop_after_tutorial)
    await state.update_data(player_balance=balance)
    await callback.answer()
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: in_shop_after_tutorial")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è - –≠—Ç–∞–ø 11 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@tutorial_router.callback_query(F.data.startswith("shop_after_") & ~F.data.in_(["shop_after_exit"]))
async def show_shop_after_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–∫—É–ø–æ–∫"""
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: show_shop_after_category –≤—ã–∑–≤–∞–Ω —Å {callback.data}")
    
    category_map = {
        "shop_after_knives": "–ù–æ–∂–∏",
        "shop_after_punches": "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", 
        "shop_after_edges": "–¢–æ—Ä—Ü–±–∏–ª—ã",
        "shop_after_materials": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "shop_after_hardware": "–§—É—Ä–Ω–∏—Ç—É—Ä–∞",
        "shop_after_threads": "–ù–∏—Ç–∫–∏",
        "shop_after_chemistry": "–•–∏–º–∏—è"
    }
    
    category = category_map.get(callback.data)
    if not category:
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è: {category}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 2000
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    all_category_items = tutorial_db.get_shop_items_by_category(category)
    
    # –°–ü–ò–°–û–ö –†–ê–ó–†–ï–®–ï–ù–ù–´–• –¢–û–í–ê–†–û–í –î–õ–Ø –ö–ê–†–¢–•–û–õ–î–ï–†–ê
    ALLOWED_ITEMS = [
        "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG",      # –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏"
        "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏ (–¥–µ—à–µ–≤–∞—è)", # –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"  
        "–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏"              # –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ù–∏—Ç–∫–∏"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –í–°–ï–ú–ò —Ç–æ–≤–∞—Ä–∞–º–∏, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ callback_data
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    for item in all_category_items:
        item_name = item[0]
        item_price = item[1]
        
        can_afford = balance >= item_price
        is_allowed = item_name in ALLOWED_ITEMS
        
        item_text = f"{item_name} - {item_price} –º–æ–Ω–µ—Ç"
        
        if not can_afford:
            item_text += " ‚ùå"
        elif not is_allowed:
            item_text += " üîí"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if not is_allowed:
            # –¢–æ–≤–∞—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            callback_data = "not_needed"
        elif not can_afford:
            # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
            callback_data = "cant_afford"
        else:
            # –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å
            short_name = item_name.lower().replace(' ', '_').replace('(', '').replace(')', '').replace('—Å—Ç—Ä–æ—á–Ω—ã–µ', 'line').replace('–ø—Ä–æ–±–æ–π–Ω–∏–∫–∏', 'punch').replace('–∫–æ–∂–∞', 'leather').replace('–≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏', 'galanterey').replace('—à–≤–µ–π–Ω—ã–µ', 'sewing').replace('–º–æ—Å–Ω–∏—Ç–∫–∏', 'mos').replace('–¥–ª—è', 'for')[:20]
            callback_data = f"buy_after_{short_name}"
        
        builder.button(
            text=item_text,
            callback_data=callback_data
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop_after_menu")
    builder.adjust(1)
    keyboard = builder.as_markup()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_caption(
            caption=f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\n\n"
                   f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
                   f"üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã (üîí - —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–Ω—ã):\n"
                   f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    await state.update_data(current_category=category, player_balance=balance)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
@tutorial_router.callback_query(F.data == "back_to_shop_after_menu")
async def back_to_shop_after_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è - –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: back_to_shop_after_menu –≤—ã–∑–≤–∞–Ω - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    try:
        data = await state.get_data()
        player_id = data.get('player_id')
        
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 2000
        
        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        all_categories = [
            ("üî™ –ù–æ–∂–∏", "shop_after_knives"),
            ("üï≥Ô∏è –ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", "shop_after_punches"), 
            ("üîß –¢–æ—Ä—Ü–±–∏–ª—ã", "shop_after_edges"),
            ("üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "shop_after_materials"),
            ("üìé –§—É—Ä–Ω–∏—Ç—É—Ä–∞", "shop_after_hardware"),
            ("üß∂ –ù–∏—Ç–∫–∏", "shop_after_threads"),
            ("üß™ –•–∏–º–∏—è", "shop_after_chemistry")
        ]
        
        keyboard_buttons = []
        for category_text, callback_data in all_categories:
            keyboard_buttons.append([InlineKeyboardButton(
                text=category_text, 
                callback_data=callback_data
            )])
        
        keyboard_buttons.append([InlineKeyboardButton(
            text="üö™ –í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", 
            callback_data="shop_after_exit"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_caption(
            caption=f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=keyboard
        )
        
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)")
        await callback.answer()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_shop_after_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
@tutorial_router.callback_query(F.data == "not_needed")
async def not_needed_item(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    await callback.answer("‚ùå –°–µ–π—á–∞—Å –º–Ω–µ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
@tutorial_router.callback_query(F.data.startswith("buy_after_"))
async def buy_after_tutorial(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è"""
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: buy_after_tutorial –≤—ã–∑–≤–∞–Ω —Å {callback.data}")
    
    try:
        data = await state.get_data()
        player_id = data.get('player_id')
        current_category = data.get('current_category', '')
        
        if not player_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        short_name = callback.data.replace("buy_after_", "")
        print(f"üõí –û–¢–õ–ê–î–ö–ê: –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {short_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 2000
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_category_items = tutorial_db.get_shop_items_by_category(current_category)
        print(f"üì¶ –û–¢–õ–ê–î–ö–ê: –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current_category}:")
        for item in all_category_items:
            print(f"  - {item[0]}")
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        short_to_full_map = {
            "line_punch_pfg": "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG",
            "leather_for_galanter": "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏ (–¥–µ—à–µ–≤–∞—è)",
            "leather_galanterey": "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏ (–¥–µ—à–µ–≤–∞—è)", 
            "sewing_mos": "–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏"
        }

        full_item_name = short_to_full_map.get(short_name)
        item_info = None
        
        if full_item_name:
            for item in all_category_items:
                if item[0] == full_item_name:
                    item_info = item
                    break
        
        # –ï–°–õ–ò –¢–û–í–ê–† –ù–ï –ù–ê–ô–î–ï–ù - –í–´–•–û–î–ò–ú
        if not item_info:
            print(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {short_name}")
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        item_name = item_info[0]
        item_price = item_info[1]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {item_name} –∑–∞ {item_price} –º–æ–Ω–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if balance < item_price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        inventory = tutorial_db.get_tutorial_inventory(player_id)
        for inv_item in inventory:
            if len(inv_item) > 0 and inv_item[0] == item_name:
                await callback.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        new_balance = balance - item_price
        success = tutorial_db.add_to_tutorial_inventory(player_id, item_name, current_category)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            tutorial_db.update_player_balance(player_id, new_balance)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            await update_shop_after_category_message(callback, current_category, new_balance, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item_name}")
            
            await state.update_data(player_balance=new_balance)
            await callback.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item_name}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {item_name}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {item_name}")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ buy_after_tutorial: {str(e)}")
        import traceback
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
async def update_shop_after_category_message(callback: CallbackQuery, category: str, balance: int, status_message: str = ""):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è"""
    all_category_items = tutorial_db.get_shop_items_by_category(category)
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –†–ê–ó–†–ï–®–ï–ù–ù–´–• –¢–û–í–ê–†–û–í
    ALLOWED_ITEMS = [
        "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG",
        "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏ (–¥–µ—à–µ–≤–∞—è)", 
        "–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏"
    ]
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    for item in all_category_items:
        item_name = item[0]
        item_price = item[1]
        
        can_afford = balance >= item_price
        is_allowed = item_name in ALLOWED_ITEMS  # –ü–†–û–í–ï–†–Ø–ï–ú –†–ê–ó–†–ï–®–ï–ù–ò–ï
        
        item_text = f"{item_name} - {item_price} –º–æ–Ω–µ—Ç"
        
        if not can_afford:
            item_text += " ‚ùå"
        elif not is_allowed:
            item_text += " üîí"  # –ó–ê–ú–û–ö –î–õ–Ø –ù–ï–†–ê–ó–†–ï–®–ï–ù–ù–´–• –¢–û–í–ê–†–û–í
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if not is_allowed:
            callback_data = "not_needed"
        elif not can_afford:
            callback_data = "cant_afford"
        else:
            short_name = item_name.lower().replace(' ', '_').replace('(', '').replace(')', '').replace('—Å—Ç—Ä–æ—á–Ω—ã–µ', 'line').replace('–ø—Ä–æ–±–æ–π–Ω–∏–∫–∏', 'punch').replace('–∫–æ–∂–∞', 'leather').replace('–≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏', 'galanterey').replace('—à–≤–µ–π–Ω—ã–µ', 'sewing').replace('–º–æ—Å–Ω–∏—Ç–∫–∏', 'mos').replace('–¥–ª—è', 'for')[:20]
            callback_data = f"buy_after_{short_name}"
        
        builder.button(
            text=item_text,
            callback_data=callback_data
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop_after_menu")
    builder.adjust(1)
    keyboard = builder.as_markup()
    
    caption = f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\n\n"
    if status_message:
        caption += f"{status_message}\n"
    caption += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    await callback.message.edit_caption(
        caption=caption,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å" –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 14 (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
@tutorial_router.callback_query(F.data == "start_holder")
async def start_holder_craft(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 14"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: start_holder_craft –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_holder_leather")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 14
    stage14_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∂—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ (–∫–æ–∂–∏ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏)
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    leather_items = [item[0] for item in inventory if any(keyword in item[0].lower() for keyword in ["–∫–æ–∂–∞", "–≥–∞–ª–∞–Ω—Ç–µ—Ä–µ—è", "–∑–∞–≥–æ—Ç–æ–≤–∫–∞"])]
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω—ã –∫–æ–∂–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {leather_items}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–∂–∞–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for item_name in leather_items:
        # –°–û–ó–î–ê–ï–ú –ü–†–û–°–¢–´–ï –ò –ü–û–ù–Ø–¢–ù–´–ï –ö–û–î–´ –î–õ–Ø –ö–ê–ñ–î–û–ô –ö–û–ñ–ò
        if item_name == "–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞":
            callback_data = "select_holder_leather_belt_cheap"
        elif item_name == "–û–±—ã—á–Ω–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞":
            callback_data = "select_holder_leather_belt_mid"
        elif item_name == "–î–æ—Ä–æ–≥–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞":
            callback_data = "select_holder_leather_belt_pro"
        elif item_name == "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏ (–¥–µ—à–µ–≤–∞—è)":
            callback_data = "select_holder_leather_galanterey_cheap"
        elif item_name == "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏ (—Å—Ä–µ–¥–Ω—è—è)":
            callback_data = "select_holder_leather_galanterey_mid"
        elif item_name == "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏ (–¥–æ—Ä–æ–≥–∞—è)":
            callback_data = "select_holder_leather_galanterey_pro"
        elif item_name == "–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (–¥–µ—à–µ–≤–∞—è)":
            callback_data = "select_holder_leather_bags_cheap"
        elif item_name == "–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (—Å—Ä–µ–¥–Ω—è—è)":
            callback_data = "select_holder_leather_bags_mid"
        elif item_name == "–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (–¥–æ—Ä–æ–≥–∞—è)":
            callback_data = "select_holder_leather_bags_pro"
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
            short_name = item_name.lower().replace(' ', '_').replace('(', '').replace(')', '')[:15]
            callback_data = f"select_holder_leather_{short_name}"
    
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üßµ {item_name}", 
            callback_data=callback_data
        )])
    stage14_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    print(f"‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–∂–∏: {[btn[0].text for btn in keyboard_buttons]}")
    print(f"‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: Callback_data –∫–Ω–æ–ø–æ–∫: {[btn[0].callback_data for btn in keyboard_buttons]}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 14
    image_path = "images/tutorial/holder_leather.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage14_text,
            reply_markup=stage14_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 14 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer(
            stage14_text,
            reply_markup=stage14_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 14 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_holder_leather)
    await callback.answer()
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_holder_leather")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è - –≠—Ç–∞–ø 12-13
@tutorial_router.callback_query(F.data == "shop_after_exit")
async def shop_after_exit(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è - –≠—Ç–∞–ø 12-13"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: shop_after_exit –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    thread_items = [item[0] for item in inventory if "–Ω–∏—Ç–∫–∏" in item[0].lower()]
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—Ç–æ–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {thread_items}")
    
    if not thread_items:
        # –ï—Å–ª–∏ –Ω–∏—Ç–æ–∫ –Ω–µ—Ç - –Ω–µ –ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å
        await callback.answer(
            "‚ùå –í–∞–º –Ω—É–∂–Ω—ã –Ω–∏—Ç–∫–∏ –¥–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞! –ö—É–ø–∏—Ç–µ –Ω–∏—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ù–∏—Ç–∫–∏'.",
            show_alert=True
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_holder_start")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 12-13
    stage13_text = "–ó–∞–∫—É–ø–∏–≤ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –¥–æ–º–æ–π –¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä –¥—Ä—É–≥—É"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –°–û–ó–î–ê–ï–ú –ü–†–û–°–¢–£–Æ –ö–ù–û–ü–ö–£ –° –ö–û–†–û–¢–ö–ò–ú callback_data
    stage13_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî® –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", callback_data="start_holder")]
    ])
    
    print("‚å®Ô∏è –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å' —Å callback_data: start_holder")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 13
    image_path = "images/tutorial/holder_start.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage13_text,
            reply_markup=stage13_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 12-13 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer(
            stage13_text,
            reply_markup=stage13_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 12-13 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_holder_start)
    await callback.answer()
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_holder_start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–∂–∏ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 15 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@tutorial_router.callback_query(F.data.startswith("select_holder_leather_"))
async def select_holder_leather(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–∂–∏ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 15"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: select_holder_leather –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∫–æ–∂–∏ –∏–∑ callback_data
    leather_code = callback.data.replace("select_holder_leather_", "")
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∫–æ–∂–∏: '{leather_code}'")
    
    # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û –°–û–î–ï–†–ñ–ê–ù–ò–Æ –ù–ê–ó–í–ê–ù–ò–Ø
    if "galanterey" in leather_code:
        # –≠—Ç–æ –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–π–Ω–∞—è –∫–æ–∂–∞ - –ø–æ–¥—Ö–æ–¥–∏—Ç
        leather_name = "–ö–æ–∂–∞ –¥–ª—è –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–∏"
        if "cheap" in leather_code:
            leather_name += " (–¥–µ—à–µ–≤–∞—è)"
        elif "mid" in leather_code:
            leather_name += " (—Å—Ä–µ–¥–Ω—è—è)" 
        elif "pro" in leather_code:
            leather_name += " (–¥–æ—Ä–æ–≥–∞—è)"
    elif "belt" in leather_code or "—Ä–µ–º–µ–Ω–Ω–∞—è" in leather_code:
        # –≠—Ç–æ —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞ - –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç
        await callback.answer("‚ùå –≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞! –í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–π–Ω—É—é –∫–æ–∂—É.", show_alert=True)
        return
    elif "bags" in leather_code or "—Å—É–º–æ–∫" in leather_code:
        # –≠—Ç–æ –∫–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ - –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç  
        await callback.answer("‚ùå –≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞! –í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ–π–Ω—É—é –∫–æ–∂—É.", show_alert=True)
        return
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", show_alert=True)
        return
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–∂–∞: {leather_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–∂—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_holder_leather=leather_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_holder_tools")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 15
    stage15_text = (
        "–í—ã –≤–∫–ª—é—á–∏–ª–∏ –Ω–∞ —Ñ–æ–Ω–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–æ–ª–∏–∫ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ —Ä–∞–±–æ—Ç–µ. –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è?\n\n"
        "- –≤—ã–±–µ—Ä–∏—Ç–µ –ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂, –°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG, –ú—É–ª—å—Ç–∏—Ç—É–ª 3–≤1"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tool_items = []
    for item in inventory:
        item_name = item[0]
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª", "—Ç–æ—Ä—Ü–±–∏–ª"]):
            tool_items.append(item_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_holder_tools=[])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for tool_name in tool_items:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ callback_data
        if tool_name == "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂":
            callback_data = "toggle_holder_tool_knife"
        elif tool_name == "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG":
            callback_data = "toggle_holder_tool_punch"
        elif tool_name == "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1":
            callback_data = "toggle_holder_tool_multitool"
        elif tool_name == "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏":
            callback_data = "toggle_holder_tool_punch_set"
        else:
            callback_data = f"toggle_holder_tool_{tool_name.replace(' ', '_').lower()[:15]}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üîò {tool_name}", 
            callback_data=callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
        callback_data="holder_tools_not_selected"
    )])
    
    tools_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 15
    image_path = "images/tutorial/holder_tools.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage15_text,
            reply_markup=tools_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 15 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer(
            stage15_text,
            reply_markup=tools_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 15 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    await state.set_state(TutorialStates.waiting_for_holder_tools)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {leather_name}")
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_holder_tools")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 15
@tutorial_router.callback_query(F.data.startswith("toggle_holder_tool_"))
async def toggle_holder_tool_selection(callback: CallbackQuery, state: FSMContext):
    """Toggle –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_holder_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    tool_code = callback.data.replace("toggle_holder_tool_", "")
    print(f"üîß –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: '{tool_code}'")
    
    # –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –ö–û–î –í –ü–û–õ–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï
    tool_map = {
        "knife": "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂",
        "punch": "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", 
        "multitool": "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1",
        "punch_set": "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    tool_name = tool_map.get(tool_code)
    if not tool_name:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
        tool_name = tool_code.replace('_', ' ')
    
    print(f"üîß –û–¢–õ–ê–î–ö–ê: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤: '{tool_name}'")
    
    # Toggle –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if tool_name in selected_tools:
        selected_tools.remove(tool_name)
        await callback.answer(f"‚ùå {tool_name} - –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        selected_tools.append(tool_name)
        await callback.answer(f"‚úÖ {tool_name} - –≤—ã–±—Ä–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_holder_tools=selected_tools)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    tool_items = []
    for item in inventory:
        item_name = item[0]
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª", "—Ç–æ—Ä—Ü–±–∏–ª"]):
            tool_items.append(item_name)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for tool_name in tool_items:
        emoji = "‚úÖ" if tool_name in selected_tools else "üîò"
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"{emoji} {tool_name}", 
            callback_data=f"toggle_holder_tool_{tool_name.replace(' ', '_')}"
        )])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    forbidden_tools = ["–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"]  # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∏ –Ω–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö
    all_required_selected = all(tool in selected_tools for tool in required_tools)
    has_forbidden_tools = any(tool in selected_tools for tool in forbidden_tools)
    
    if has_forbidden_tools:
        # –ï—Å—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –≤—ã—Å–µ—á–Ω–æ–≥–æ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∞", 
            callback_data="holder_tools_not_selected"
        )])
    elif all_required_selected:
        # –í—Å–µ –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –Ω–µ—Ç
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            callback_data="holder_tools_confirmed"
        )])
    else:
        # –ù–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
            callback_data="holder_tools_not_selected"
        )])
    
    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
        await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
@tutorial_router.callback_query(F.data == "holder_tools_not_selected")
async def holder_tools_not_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    data = await state.get_data()
    selected_tools = data.get('selected_holder_tools', [])
    
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    forbidden_tools = ["–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"]
    
    missing_tools = [tool for tool in required_tools if tool not in selected_tools]
    extra_tools = [tool for tool in forbidden_tools if tool in selected_tools]
    
    if missing_tools:
        missing_text = ", ".join(missing_tools)
        await callback.answer(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã: {missing_text}", show_alert=True)
    elif extra_tools:
        await callback.answer("‚ùå –û—Ç–º–µ–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –≤—ã—Å–µ—á–Ω–æ–≥–æ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∞ - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω", show_alert=True)
    else:
        await callback.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 16
@tutorial_router.callback_query(F.data == "holder_tools_confirmed")
async def holder_tools_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 16"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_holder_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –Ω–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    forbidden_tools = ["–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"]
    
    if not all(tool in selected_tools for tool in required_tools):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", show_alert=True)
        return
    
    if any(tool in selected_tools for tool in forbidden_tools):
        await callback.answer("‚ùå –û—Ç–º–µ–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –≤—ã—Å–µ—á–Ω–æ–≥–æ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_holder_threads")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 16
    stage16_text = (
        "–ü–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ä–æ–ª–∏–∫–∞ –≤—ã –Ω–∞—á–∞–ª–∏ –∫—Ä–æ–∏—Ç—å –¥–µ—Ç–∞–ª–ª–∏ –ø–æ –ª–∏–Ω–µ–π–∫–µ. –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–∞–∂–µ –±–æ–ª–µ–µ –º–µ–Ω–µ–µ —Å–Ω–æ—Å–Ω–æ. –ª–∏–Ω–µ–π–∫–∞ –ø–æ—á—Ç–∏ –Ω–µ —Å—ä–µ–∑–∂–∞–ª–∞. –°–µ–≥–æ–¥–Ω—è –¥–∞–∂–µ —Ñ–∞—Å–∫–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É–ª—å—Ç–∏—Ç—É–ª–æ–º –Ω–µ —Ç–∞–∫ –∫—Ä–∏–≤–æ. –ù–æ —á–µ–≥–æ –≤—ã —Ç–æ—á–Ω–æ –Ω–µ –æ–∂–∏–¥–∞–ª–∏, —Ç–∞–∫ —ç—Ç–æ –≥—Ä–æ—Ö–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–±–æ–π–Ω–∏–∫–æ–º. –í–µ—Å—å —Å—Ç–æ–ª –≥—Ä–µ–º–µ–ª –≤ —É–Ω–∏—Å–æ–Ω –≤–∞—à–∏–º —Å—Ç—É–∫–∞–º \n"
        "–í–∑–≥–ª—è–Ω—É–≤ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–±–∏—Ç–∏—è, –≤—ã –æ–∫–æ–ª–æ 2 —á–∞—Å–æ–≤ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫ –ø—Ä–æ–±–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ä—Å—Ç–∏—è, —á—Ç–æ–±—ã –Ω–∞ –≤—ã—Ö–æ–¥–µ –±—ã–ª–∞ —Ä–æ–≤–Ω–∞—è —Å—Ç—Ä–æ—á–∫–∞.\n"
        "–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å—à–∏–≤–∞—Ç—å\n\n"
        "*- –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏—Ç–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ -*"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ (–Ω–∏—Ç–∫–∏)
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    thread_items = [item[0] for item in inventory if "–Ω–∏—Ç–∫–∏" in item[0].lower()]
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω—ã –Ω–∏—Ç–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {thread_items}")
    
    # –°–û–ó–î–ê–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –° –î–û–°–¢–£–ü–ù–´–ú–ò –ù–ò–¢–ö–ê–ú–ò
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for item_name in thread_items:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback_data
        short_name = item_name.lower().replace(' ', '_').replace('(', '').replace(')', '').replace('—à–≤–µ–π–Ω—ã–µ', 'sewing').replace('–º–æ—Å–Ω–∏—Ç–∫–∏', 'mos')[:20]
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üßµ {item_name}", 
            callback_data=f"select_thread_{short_name}"
        )])
    
    stage16_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    print(f"‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—Ç–æ–∫: {[btn[0].text for btn in keyboard_buttons]}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 16
    image_path = "images/tutorial/holder_stitch.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage16_text,
            reply_markup=stage16_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 16 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer(
            stage16_text,
            reply_markup=stage16_keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 16 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_holder_threads)
    await callback.answer("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!")
    print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_for_holder_threads")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—Ç–æ–∫ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 17
@tutorial_router.callback_query(F.data.startswith("select_thread_"))
async def select_holder_threads(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∏—Ç–æ–∫ –¥–ª—è –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 17"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∏—Ç–æ–∫
    thread_name = callback.data.replace("select_thread_", "").replace("_", " ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_holder_quality")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 17
    stage17_text = (
        "–ó–∞–∫–æ–Ω—á–∏–≤ –ø—Ä–æ—à–∏–≤–∞—Ç—å —Ö–æ–ª–¥–µ—Ä –≤—ã –≤–∑–≥–ª—è–Ω—É–ª–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ—à–∏–ª–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –ª—É—á—à–µ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.\n"
        "–ö—Ä–∏–≤–æ–π —à–æ–≤, —Å—Ç—Ä–∞—à–Ω—ã–π —Ç–æ—Ä–µ—Ü –∏ —Å–ª–µ–¥—ã –∫–ª–µ—è, —ç—Ç–æ —è–≤–Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ —Å—Ç–æ–∏—Ç –¥–∞—Ä–∏—Ç—å –¥—Ä—É–∑—å—è–º.\n\n"
        "–û—Ç–ª–æ–∂–∏–≤ –∏–∑–¥–µ–ª–∏–µ –≤ —è—â–∏–∫, –µ—â–µ –ø–∞—Ä—É –¥–Ω–µ–π –≤—ã –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª–∏—Å—å –≤ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ–ª–¥–µ—Ä–∞.\n"
        "–•–æ—Ä–æ—à–æ, —á—Ç–æ –∫–æ–∂–∏ —É—Ö–æ–¥–∏–ª–æ –Ω–µ –º–Ω–æ–≥–æ –∏ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ-–º–µ–Ω–µ–µ —Å–Ω–æ—Å–Ω–æ–µ"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage17_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="holder_evaluate_quality")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 17
    image_path = "images/tutorial/holder_quality.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage17_text,
            reply_markup=stage17_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage17_text,
            reply_markup=stage17_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_holder_quality)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {thread_name}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 18
@tutorial_router.callback_query(F.data == "holder_evaluate_quality")
async def holder_evaluate_quality(callback: CallbackQuery, state: FSMContext):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 18"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_holder_gift")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    # –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–î–ï–†–ñ–ö–£ 2 –°–ï–ö–£–ù–î–´
    await asyncio.sleep(2)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    quality_text = "–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞ ‚Äì *–û–±—ã—á–Ω–æ–µ*"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    image_path = "images/tutorial/quality_ordinary.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=quality_text
        )
    except Exception as e:
        await callback.message.answer(quality_text)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    quality_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å —Ö–æ–ª–¥–µ—Ä", callback_data="holder_gift")]
    ])
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä –¥—Ä—É–≥—É",
            reply_markup=quality_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            "–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä –¥—Ä—É–≥—É",
            reply_markup=quality_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_holder_gift)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –≠—Ç–∞–ø 19
@tutorial_router.callback_query(F.data == "holder_gift")
async def holder_gift(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–∞—Ä–æ–∫ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è - –≠—Ç–∞–ø 19"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É 2000 –º–æ–Ω–µ—Ç
    progress = tutorial_db.get_tutorial_progress(player_id)
    current_balance = progress[3] if progress else 2000
    new_balance = current_balance + 2000
    tutorial_db.update_player_balance(player_id, new_balance)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_holder_final")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 19
    stage19_text = (
        "–î—Ä—É–≥ –±—ã–ª –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –∏ –¥–∞–∂–µ –∑–∞–ø–ª–∞—Ç–∏–ª –≤–∞–º 2000 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É. –í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–ª–∏—Å—å, –ø–æ–Ω–∏–º–∞—è –∫–∞–∫–æ–π –æ–Ω –∫—Ä–∏–≤–æ–π, "
        "–Ω–æ –¥—Ä—É–≥ –Ω–∞—Å—Ç–æ—è–ª –∏ –æ—Ç–∫–∞–∑–∞–ª—Å—è –∑–∞–±–∏—Ä–∞—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ.\n\n"
        "–í–æ–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ —Ç–∞–∫–∏–º –∏—Å—Ö–æ–¥–æ–º, –≤—ã —Ä–µ—à–∏–ª–∏, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ —Ä–µ—à–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω (–∑–∞–¥–µ–ª –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏)
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stage19_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè™ –í –º–∞–≥–∞–∑–∏–Ω", callback_data="holder_to_shop")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 19
    image_path = "images/tutorial/holder_final.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage19_text,
            reply_markup=stage19_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage19_text,
            reply_markup=stage19_keyboard
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(TutorialStates.waiting_for_holder_final)
    await callback.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ 2000 –º–æ–Ω–µ—Ç! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

# =============================================================================
# –¢–†–ï–¢–¨–Ø –ß–ê–°–¢–¨ –û–ë–£–ß–ï–ù–ò–Ø - –ò–ó–ì–û–¢–û–í–õ–ï–ù–ò–ï –°–£–ú–ö–ò (–≠–¢–ê–ü–´ 20-36)
# =============================================================================

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í –º–∞–≥–∞–∑–∏–Ω" –∏–∑ —Ñ–∏–Ω–∞–ª–∞ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞ - –≠—Ç–∞–ø 20
@tutorial_router.callback_query(F.data == "holder_to_shop")
async def holder_to_shop(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å—É–º–∫–∏ - –≠—Ç–∞–ø 20"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: holder_to_shop –≤—ã–∑–≤–∞–Ω - –Ω–∞—á–∞–ª–æ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_start")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 20
    stage20_text = (
        "–í–æ–æ–¥—É—à–µ–≤–∏–≤—à–∏—Å—å –¥–æ—Ö–æ–¥–æ–º —Å –ø—Ä–æ–¥–∞–∂–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–∞, –≤—ã —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ. "
        "–ö–∞–∫ —Ä–∞–∑ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –∫–æ–∂–∞ –Ω–∞ —Å—Ä–µ–¥–Ω—é—é —Å—É–º–æ—á–∫—É.\n\n"
        "–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–∞—Ä—É —Ä–æ–ª–∏–∫–æ–≤ –æ —Ç–æ–º, –∫–∞–∫ –µ—ë —Å–¥–µ–ª–∞—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–æ–π –∏ –≤–æ—Å–∫–æ–º, "
        "—á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –∫–æ–∂—É –æ—Ç –≤–æ–¥—ã –∏ –≤–Ω–µ—à–Ω–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    stage20_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—É–º–∫–∏", callback_data="bag_go_to_shop")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 20
    image_path = "images/tutorial/bag_start.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage20_text,
            reply_markup=stage20_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage20_text,
            reply_markup=stage20_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_start)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—É–º–∫–∏" - –≠—Ç–∞–ø 21
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—É–º–∫–∏" - –≠—Ç–∞–ø 21
@tutorial_router.callback_query(F.data == "bag_go_to_shop")
async def bag_go_to_shop(callback: CallbackQuery, state: FSMContext):
    """–ú–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—É–º–∫–∏ - –≠—Ç–∞–ø 21"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: bag_go_to_shop –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "in_shop_bag_materials")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 2000
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 21
    stage21_text = "–î–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å—É–º–∫–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ –≤–æ—Å–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (–ü–û–õ–ù–´–ô –ö–ê–¢–ê–õ–û–ì –ö–ê–ö –í –≠–¢–ê–ü–ï 10)
    all_categories = [
        ("üî™ –ù–æ–∂–∏", "shop_bag_knives"),
        ("üï≥Ô∏è –ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", "shop_bag_punches"), 
        ("üîß –¢–æ—Ä—Ü–±–∏–ª—ã", "shop_bag_edges"),
        ("üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "shop_bag_materials"),
        ("üìé –§—É—Ä–Ω–∏—Ç—É—Ä–∞", "shop_bag_hardware"),
        ("üß∂ –ù–∏—Ç–∫–∏", "shop_bag_threads"),
        ("üß™ –•–∏–º–∏—è", "shop_bag_chemistry")
    ]
    
    keyboard_buttons = []
    for category_text, callback_data in all_categories:
        keyboard_buttons.append([InlineKeyboardButton(
            text=category_text, 
            callback_data=callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"
    keyboard_buttons.append([InlineKeyboardButton(
        text="üö™ –í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", 
        callback_data="bag_shop_exit"
    )])
    
    shop_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 21
    image_path = "images/tutorial/bag_shop.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"{stage21_text}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=shop_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            f"{stage21_text}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=shop_keyboard
        )
    
    await state.set_state(TutorialStates.in_shop_bag_materials)
    await state.update_data(player_balance=balance)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Å—É–º–∫–∏
@tutorial_router.callback_query(F.data.startswith("shop_bag_") & ~F.data.in_(["bag_shop_exit"]))
async def show_bag_shop_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—É–º–∫–∏"""
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: show_bag_shop_category –≤—ã–∑–≤–∞–Ω —Å {callback.data}")
    
    category_map = {
        "shop_bag_knives": "–ù–æ–∂–∏",
        "shop_bag_punches": "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", 
        "shop_bag_edges": "–¢–æ—Ä—Ü–±–∏–ª—ã",
        "shop_bag_materials": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "shop_bag_hardware": "–§—É—Ä–Ω–∏—Ç—É—Ä–∞",
        "shop_bag_threads": "–ù–∏—Ç–∫–∏",
        "shop_bag_chemistry": "–•–∏–º–∏—è"
    }
    
    category = category_map.get(callback.data)
    if not category:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 2000
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    all_category_items = tutorial_db.get_shop_items_by_category(category)
    
    # –°–ü–ò–°–û–ö –†–ê–ó–†–ï–®–ï–ù–ù–´–• –¢–û–í–ê–†–û–í –î–õ–Ø –°–£–ú–ö–ò (—ç—Ç–∞–ø 21)
    ALLOWED_ITEMS_STAGE_21 = [
        "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫",  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–§—É—Ä–Ω–∏—Ç—É—Ä–∞"
        "–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫"                 # –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–•–∏–º–∏—è"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –í–°–ï–ú–ò —Ç–æ–≤–∞—Ä–∞–º–∏, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ callback_data
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    for item in all_category_items:
        item_name = item[0]
        item_price = item[1]
        
        can_afford = balance >= item_price
        is_allowed = item_name in ALLOWED_ITEMS_STAGE_21
        
        item_text = f"{item_name} - {item_price} –º–æ–Ω–µ—Ç"
        
        if not can_afford:
            item_text += " ‚ùå"
        elif not is_allowed:
            item_text += " üîí"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if not is_allowed:
            # –¢–æ–≤–∞—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            callback_data = "not_needed"
        elif not can_afford:
            # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
            callback_data = "cant_afford"
        else:
            if item_name == "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫":
                callback_data = "buy_bag_cheap_bags_hardware"
            elif item_name == "–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫":
                callback_data = "buy_bag_beeswax"
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                short_name = item_name.lower().replace(' ', '_')[:20]
                callback_data = f"buy_bag_{short_name}"
        
        builder.button(
            text=item_text,
            callback_data=callback_data
        )
    
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bag_shop_menu")
    builder.adjust(1)
    keyboard = builder.as_markup()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_caption(
            caption=f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\nüìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã (üîí - —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–Ω—ã):\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    await state.update_data(current_category=category, player_balance=balance)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—É–º–∫–∏ - –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ö–û–î
@tutorial_router.callback_query(F.data.startswith("buy_bag_"))
async def buy_bag_item(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—É–º–∫–∏"""
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: buy_bag_item –≤—ã–∑–≤–∞–Ω —Å {callback.data}")
    
    try:
        data = await state.get_data()
        player_id = data.get('player_id')
        current_category = data.get('current_category', '')
        
        if not player_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º callback_data
        callback_data = callback.data.replace("buy_bag_", "")
        print(f"üõí –û–¢–õ–ê–î–ö–ê: Callback_data —Ç–æ–≤–∞—Ä–∞: '{callback_data}'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 2000
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_category_items = tutorial_db.get_shop_items_by_category(current_category)
        print(f"üì¶ –û–¢–õ–ê–î–ö–ê: –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current_category}:")
        for item in all_category_items:
            print(f"  - {item[0]}")
        
        # –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ callback_data —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        callback_to_item_map = {
            "cheap_bags_hardware": "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫",
            "beeswax": "–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫"
        }
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –ø–æ–ª–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        full_item_name = callback_to_item_map.get(callback_data)
        item_info = None
        
        if full_item_name:
            for item in all_category_items:
                if item[0] == full_item_name:
                    item_info = item
                    break
        
        if not item_info:
            print(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {callback_data}")
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        item_name = item_info[0]
        item_price = item_info[1]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {item_name} –∑–∞ {item_price} –º–æ–Ω–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if balance < item_price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        inventory = tutorial_db.get_tutorial_inventory(player_id)
        for inv_item in inventory:
            if len(inv_item) > 0 and inv_item[0] == item_name:
                await callback.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        new_balance = balance - item_price
        success = tutorial_db.add_to_tutorial_inventory(player_id, item_name, current_category)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            tutorial_db.update_player_balance(player_id, new_balance)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            await back_to_bag_shop_menu(callback, state)
            
            await state.update_data(player_balance=new_balance)
            await callback.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item_name}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {item_name}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {item_name}")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ buy_bag_item: {str(e)}")
        import traceback
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Å—É–º–∫–∏
@tutorial_router.callback_query(F.data == "back_to_bag_shop_menu")
async def back_to_bag_shop_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ —Å—É–º–∫–∏"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: back_to_bag_shop_menu –≤—ã–∑–≤–∞–Ω")
    
    try:
        data = await state.get_data()
        player_id = data.get('player_id')
        
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 2000
        
        # –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        all_categories = [
            ("üî™ –ù–æ–∂–∏", "shop_bag_knives"),
            ("üï≥Ô∏è –ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", "shop_bag_punches"), 
            ("üîß –¢–æ—Ä—Ü–±–∏–ª—ã", "shop_bag_edges"),
            ("üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "shop_bag_materials"),
            ("üìé –§—É—Ä–Ω–∏—Ç—É—Ä–∞", "shop_bag_hardware"),
            ("üß∂ –ù–∏—Ç–∫–∏", "shop_bag_threads"),
            ("üß™ –•–∏–º–∏—è", "shop_bag_chemistry")
        ]
        
        keyboard_buttons = []
        for category_text, callback_data in all_categories:
            keyboard_buttons.append([InlineKeyboardButton(
                text=category_text, 
                callback_data=callback_data
            )])
        
        # –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"
        keyboard_buttons.append([InlineKeyboardButton(
            text="üö™ –í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", 
            callback_data="bag_shop_exit"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_caption(
            caption=f"–î–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å—É–º–∫–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ –≤–æ—Å–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=keyboard
        )
        
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ —Å—É–º–∫–∏")
        await callback.answer()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_bag_shop_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞" –¥–ª—è —Å—É–º–∫–∏ - –≠—Ç–∞–ø 21
@tutorial_router.callback_query(F.data == "bag_shop_exit")
async def bag_shop_exit(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–∫—É–ø–æ–∫ - –≠—Ç–∞–ø 21"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: bag_shop_exit –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    inventory_items = [item[0] for item in inventory]
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–∞–ø–∞ 21
    required_items = ["–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫", "–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    missing_items = []
    for item in required_items:
        if item not in inventory_items:
            missing_items.append(item)
    
    print(f"üéí –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –≤—ã—Ö–æ–¥–∞: {inventory_items}")
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã: {missing_items}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã - –Ω–µ –ø—É—Å–∫–∞–µ–º
    if missing_items:
        missing_text = "\n‚Ä¢ " + "\n‚Ä¢ ".join(missing_items)
        await callback.answer(
            f"‚ùå –¢—ã –µ—â–µ –Ω–µ –≤—Å–µ –∫—É–ø–∏–ª!\n\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:{missing_text}\n\n–í–µ—Ä–Ω–∏—Å—å –∏ –¥–æ–∫—É–ø–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã.",
            show_alert=True
        )
        return
    
    # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∫—É–ø–ª–µ–Ω—ã - –º–æ–∂–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_materials_selection")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await callback.message.edit_caption(
        caption="üè™ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ!",
        reply_markup=None
    )
    
    await callback.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç—Ç–∞–ø—É 22
    await bag_go_home(callback, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π" - –≠—Ç–∞–ø 22
@tutorial_router.callback_query(F.data == "bag_go_home")
async def bag_go_home(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –º–∏–Ω–∏-–∏–≥—Ä—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å—É–º–∫–∏ - –≠—Ç–∞–ø 22"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: bag_go_home –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_materials_selection")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 22
    stage22_text = (
        "–í—ã —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –ø—Ä–∏–Ω—è–ª–∏—Å—å –∑–∞ —Ä–∞–±–æ—Ç—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    material_items = [item[0] for item in inventory if any(keyword in item[0].lower() for keyword in ["–∫–æ–∂–∞", "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞"])]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    await state.update_data(selected_bag_materials=[])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    keyboard_buttons = []
    for item_name in material_items:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üîò {item_name}", 
            callback_data=f"toggle_bag_material_{item_name.replace(' ', '_')}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)", 
        callback_data="bag_materials_not_selected"
    )])
    
    materials_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 22
    image_path = "images/tutorial/bag_materials.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage22_text,
            reply_markup=materials_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage22_text,
            reply_markup=materials_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_materials_selection)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å—É–º–∫–∏ - –≠—Ç–∞–ø 22
@tutorial_router.callback_query(F.data.startswith("toggle_bag_material_"))
async def toggle_bag_material_selection(callback: CallbackQuery, state: FSMContext):
    """Toggle –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å—É–º–∫–∏"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_materials = data.get('selected_bag_materials', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    material_name = callback.data.replace("toggle_bag_material_", "").replace("_", " ")
    
    # Toggle –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    if material_name in selected_materials:
        selected_materials.remove(material_name)
        await callback.answer(f"‚ùå {material_name} - –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        selected_materials.append(material_name)
        await callback.answer(f"‚úÖ {material_name} - –≤—ã–±—Ä–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_bag_materials=selected_materials)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    material_items = [item[0] for item in inventory if any(keyword in item[0].lower() for keyword in ["–∫–æ–∂–∞", "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞"])]
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    for item_name in material_items:
        emoji = "‚úÖ" if item_name in selected_materials else "üîò"
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"{emoji} {item_name}", 
            callback_data=f"toggle_bag_material_{item_name.replace(' ', '_')}"
        )])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    required_materials = ["–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (–¥–µ—à–µ–≤–∞—è)", "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫"]
    all_required_selected = all(material in selected_materials for material in required_materials)
    
    if all_required_selected:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            callback_data="bag_materials_confirmed"
        )])
    else:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)", 
            callback_data="bag_materials_not_selected"
        )])
    
    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
    except Exception as e:
        await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@tutorial_router.callback_query(F.data == "bag_materials_not_selected")
async def bag_materials_not_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    data = await state.get_data()
    selected_materials = data.get('selected_bag_materials', [])
    
    required_materials = ["–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (–¥–µ—à–µ–≤–∞—è)", "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫"]
    missing_materials = [material for material in required_materials if material not in selected_materials]
    
    if missing_materials:
        missing_text = ", ".join(missing_materials)
        await callback.answer(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã: {missing_text}", show_alert=True)
    else:
        await callback.answer("‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –≠—Ç–∞–ø 23
@tutorial_router.callback_query(F.data == "bag_materials_confirmed")
async def bag_materials_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≠—Ç–∞–ø 23"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_materials = data.get('selected_bag_materials', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä
    required_materials = ["–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (–¥–µ—à–µ–≤–∞—è)", "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫"]
    if not all(material in selected_materials for material in required_materials):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_tools_selection")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 23
    stage23_text = (
        "–ò–∑ —è—â–∏–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤—ã –¥–æ—Å—Ç–∞–ª–∏...\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    tool_items = []
    for item in inventory:
        item_name = item[0]
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª"]):
            tool_items.append(item_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    await state.update_data(selected_bag_tools=[])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    keyboard_buttons = []
    for tool_name in tool_items:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ callback_data –∫–∞–∫ –≤ –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä–µ
        if tool_name == "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂":
            callback_data = "toggle_bag_tool_knife"
        elif tool_name == "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG":
            callback_data = "toggle_bag_tool_punch"
        elif tool_name == "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏":
            callback_data = "toggle_bag_tool_punch_set"
        elif tool_name == "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1":
            callback_data = "toggle_bag_tool_multitool"
        else:
            callback_data = f"toggle_bag_tool_{tool_name.replace(' ', '_').lower()[:15]}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üîò {tool_name}", 
            callback_data=callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
        callback_data="bag_tools_not_selected"
    )])
    
    tools_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 23
    image_path = "images/tutorial/bag_tools.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage23_text,
            reply_markup=tools_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage23_text,
            reply_markup=tools_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_tools_selection)
    await callback.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—É–º–∫–∏ - –≠—Ç–∞–ø 23
@tutorial_router.callback_query(F.data.startswith("toggle_bag_tool_"))
async def toggle_bag_tool_selection(callback: CallbackQuery, state: FSMContext):
    """Toggle –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—É–º–∫–∏"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_bag_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
    tool_code = callback.data.replace("toggle_bag_tool_", "")
    
    tool_map = {
        "knife": "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂",
        "punch": "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", 
        "punch_set": "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏",
        "multitool": "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"
    }
    
    tool_name = tool_map.get(tool_code)
    if not tool_name:
        tool_name = tool_code.replace('_', ' ')
    
    # Toggle –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if tool_name in selected_tools:
        selected_tools.remove(tool_name)
        await callback.answer(f"‚ùå {tool_name} - –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        selected_tools.append(tool_name)
        await callback.answer(f"‚úÖ {tool_name} - –≤—ã–±—Ä–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_bag_tools=selected_tools)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    tool_items = []
    for item in inventory:
        item_name = item[0]
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª"]):
            tool_items.append(item_name)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    for tool_name in tool_items:
        emoji = "‚úÖ" if tool_name in selected_tools else "üîò"
        
        # –°–æ–∑–¥–∞–µ–º callback_data –∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        if tool_name == "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂":
            callback_data = "toggle_bag_tool_knife"
        elif tool_name == "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG":
            callback_data = "toggle_bag_tool_punch"
        elif tool_name == "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏":
            callback_data = "toggle_bag_tool_punch_set"
        elif tool_name == "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1":
            callback_data = "toggle_bag_tool_multitool"
        else:
            callback_data = f"toggle_bag_tool_{tool_name.replace(' ', '_').lower()[:15]}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"{emoji} {tool_name}", 
            callback_data=callback_data
        )])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    all_required_selected = all(tool in selected_tools for tool in required_tools)
    
    if all_required_selected:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            callback_data="bag_tools_confirmed"
        )])
    else:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
            callback_data="bag_tools_not_selected"
        )])
    
    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
    except Exception as e:
        await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
@tutorial_router.callback_query(F.data == "bag_tools_not_selected")
async def bag_tools_not_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    data = await state.get_data()
    selected_tools = data.get('selected_bag_tools', [])
    
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    missing_tools = [tool for tool in required_tools if tool not in selected_tools]
    
    if missing_tools:
        missing_text = ", ".join(missing_tools)
        await callback.answer(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã: {missing_text}", show_alert=True)
    else:
        await callback.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≠—Ç–∞–ø 24
@tutorial_router.callback_query(F.data == "bag_tools_confirmed")
async def bag_tools_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–∂–∏ - –≠—Ç–∞–ø 24"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_bag_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    if not all(tool in selected_tools for tool in required_tools):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_wax_selection")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 24
    stage24_text = (
        "–í—ã —Ä–∞—Å–∫—Ä–æ–∏–ª–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∏–∑ –≤–∏–¥–µ–æ. –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–∂—É, —á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –µ—ë –æ—Ç –≤–æ–¥—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ—Å–∫ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ (–≤–æ—Å–∫)
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    wax_items = [item[0] for item in inventory if "–≤–æ—Å–∫" in item[0].lower()]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤–æ—Å–∫–∞
    keyboard_buttons = []
    for item_name in wax_items:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üß¥ {item_name}", 
            callback_data=f"select_bag_wax_{item_name.replace(' ', '_')}"
        )])
    
    wax_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 24
    image_path = "images/tutorial/bag_wax.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage24_text,
            reply_markup=wax_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage24_text,
            reply_markup=wax_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_wax_selection)
    await callback.answer("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ—Å–∫–∞ - –≠—Ç–∞–ø 25
@tutorial_router.callback_query(F.data.startswith("select_bag_wax_"))
async def select_bag_wax(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–æ—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–∂–∏ - –≠—Ç–∞–ø 25"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Å–∫–∞
    wax_name = callback.data.replace("select_bag_wax_", "").replace("_", " ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_threads_selection")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 25
    stage25_text = (
        "–û–±—Ä–∞–±–æ—Ç–∞–≤ –¥–µ—Ç–∞–ª–∏, –≤—ã –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç–µ –∫ —Å–±–æ—Ä–∫–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏—Ç–∫–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ (–Ω–∏—Ç–∫–∏)
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    thread_items = [item[0] for item in inventory if "–Ω–∏—Ç–∫–∏" in item[0].lower()]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –Ω–∏—Ç–æ–∫
    keyboard_buttons = []
    for item_name in thread_items:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üßµ {item_name}", 
            callback_data=f"select_bag_thread_{item_name.replace(' ', '_')}"
        )])
    
    threads_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 25
    image_path = "images/tutorial/bag_threads.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage25_text,
            reply_markup=threads_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage25_text,
            reply_markup=threads_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_threads_selection)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {wax_name}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—Ç–æ–∫ - –≠—Ç–∞–ø 26
@tutorial_router.callback_query(F.data.startswith("select_bag_thread_"))
async def select_bag_thread(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∏—Ç–æ–∫ –¥–ª—è —Å–±–æ—Ä–∫–∏ - –≠—Ç–∞–ø 26"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏—Ç–æ–∫
    thread_name = callback.data.replace("select_bag_thread_", "").replace("_", " ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_quality_1")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 26
    stage26_text = (
        "–û–∫–æ–ª–æ –¥–≤—É—Ö –≤–µ—á–µ—Ä–æ–≤ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤–∞—à—É –ø–µ—Ä–≤—É—é —Å—É–º–∫—É. –ù–∞ –≤–∏–¥–µ–æ –≤ YouTube –≤—Å—ë –∫–∞–∑–∞–ª–æ—Å—å –≥–æ—Ä–∞–∑–¥–æ –ø—Ä–æ—â–µ.\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –≤—Å—ë –≤—ã—à–ª–æ –º–µ–Ω–µ–µ —É–¥–∞—á–Ω–æ:\n"
        "‚Ä¢ –ú—É–ª—å—Ç–∏—Ç—É–ª —Ç–æ –∏ –¥–µ–ª–æ –¥—Ä–∞–ª –∫–æ–∂—É –∏ –Ω–µ –¥–∞–≤–∞–ª —Å–¥–µ–ª–∞—Ç—å —Ä–æ–≤–Ω—É—é —Ñ–∞—Å–∫—É\n"
        "‚Ä¢ –í–æ—Å–∫ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –∫–æ–∂–µ, –≤ –∏—Ç–æ–≥–µ –Ω–∞ —Å—É–º–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç—ë–º–Ω—ã–µ, —Å–ª–µ–≥–∫–∞ –ª–∏–ø–∫–∏–µ –ø—è—Ç–Ω–∞\n"
        "‚Ä¢ –®–æ–≤ –º–µ—Å—Ç–∞–º–∏ '–≥—É–ª—è–µ—Ç', –∏ —Å—Ç–µ–∂–∫–∏ –ª–µ–∂–∞—Ç –Ω–µ—Ä–æ–≤–Ω–æ, –º–µ—Å—Ç–∞–º–∏ –∫–∞–∫ –±—É–¥—Ç–æ –ø–µ—Ä–µ—Ç—è–Ω—É—Ç—ã"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    stage26_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="bag_evaluate_quality_1")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 26
    image_path = "images/tutorial/bag_result_1.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage26_text,
            reply_markup=stage26_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage26_text,
            reply_markup=stage26_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_quality_1)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {thread_name}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –≠—Ç–∞–ø 27
@tutorial_router.callback_query(F.data == "bag_evaluate_quality_1")
async def bag_evaluate_quality_1(callback: CallbackQuery, state: FSMContext):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å—É–º–∫–∏ - –≠—Ç–∞–ø 27"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_retry")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    quality_text = "–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞ ‚Äì –ë—Ä–∞–∫"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    image_path = "images/tutorial/quality_reject.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=quality_text
        )
    except Exception as e:
        await callback.message.answer(quality_text)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    for item in inventory:
        if item[0] in ["–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (–¥–µ—à–µ–≤–∞—è)", "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫"]:
            # –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            conn = tutorial_db.get_connection()
            try:
                conn.execute(
                    'DELETE FROM tutorial_inventory WHERE player_id = ? AND item_name = ?',
                    (player_id, item[0])
                )
                conn.commit()
            finally:
                conn.close()
    
    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 28
    stage28_text = (
        "–í—ã —Å –¥–æ—Å–∞–¥–æ–π —Ä–∞–∑–≥–ª—è–¥—ã–≤–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –°—Ç–∞–ª–æ —è—Å–Ω–æ: –¥–ª—è —Ç–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ–π –≤–µ—â–∏, –∫–∞–∫ —Å—É–º–∫–∞, –¥–µ—à–µ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî —ç—Ç–æ –ø—É—Ç—å –≤ –Ω–∏–∫—É–¥–∞. "
        "'–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–æ–∑—å–º—É —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á—à–µ', ‚Äî —Ç–≤–µ—Ä–¥–æ —Ä–µ—à–∞–µ—Ç–µ –≤—ã.\n\n"
        "–ë–ª–∞–≥–æ –Ω–∞ –¥–Ω—è—Ö –≤—ã–¥–∞–ª–∏ –ø—Ä–µ–º–∏—é"
    )
    
    # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ 1000 –º–æ–Ω–µ—Ç
    progress = tutorial_db.get_tutorial_progress(player_id)
    current_balance = progress[3] if progress else 2000
    new_balance = current_balance + 1000
    tutorial_db.update_player_balance(player_id, new_balance)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    stage28_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—É—á—à–µ", callback_data="bag_retry_shop")]
    ])
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage28_text,
            reply_markup=stage28_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage28_text,
            reply_markup=stage28_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_retry)
    await state.update_data(player_balance=new_balance)
    await callback.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ 1000 –º–æ–Ω–µ—Ç! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—É—á—à–µ" - –≠—Ç–∞–ø 29
@tutorial_router.callback_query(F.data == "bag_retry_shop")
async def bag_retry_shop(callback: CallbackQuery, state: FSMContext):
    """–í—Ç–æ—Ä–∞—è –∑–∞–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ - –≠—Ç–∞–ø 29"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: bag_retry_shop –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "in_shop_bag_retry")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 3000  # +1000 –æ—Ç –ø—Ä–µ–º–∏–∏
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 29
    stage29_text = "–î–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    allowed_categories = [
        ("üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—É–º–æ–∫", "shop_bag_retry_materials"),
        ("üìé –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫", "shop_bag_retry_hardware"),
        ("üß∂ –ù–∏—Ç–∫–∏", "shop_bag_retry_threads"),
        ("üß™ –•–∏–º–∏—è", "shop_bag_retry_chemistry")
    ]
    
    keyboard_buttons = []
    for category_text, callback_data in allowed_categories:
        keyboard_buttons.append([InlineKeyboardButton(
            text=category_text, 
            callback_data=callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π"
    keyboard_buttons.append([InlineKeyboardButton(
        text="üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π (–∫—É–ø–∏—Ç–µ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)", 
        callback_data="bag_retry_shop_not_ready"
    )])
    
    shop_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 29
    image_path = "images/tutorial/bag_retry_shop.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"{stage29_text}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=shop_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            f"{stage29_text}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=shop_keyboard
        )
    
    await state.set_state(TutorialStates.in_shop_bag_retry)
    await state.update_data(player_balance=balance)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏
@tutorial_router.callback_query(F.data.startswith("shop_bag_retry_"))
async def show_bag_retry_shop_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: show_bag_retry_shop_category –≤—ã–∑–≤–∞–Ω —Å {callback.data}")
    
    category_map = {
        "shop_bag_retry_materials": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "shop_bag_retry_hardware": "–§—É—Ä–Ω–∏—Ç—É—Ä–∞",
        "shop_bag_retry_threads": "–ù–∏—Ç–∫–∏",
        "shop_bag_retry_chemistry": "–•–∏–º–∏—è"
    }
    
    category = category_map.get(callback.data)
    if not category:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 3000
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_category_items = tutorial_db.get_shop_items_by_category(category)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏
    allowed_items = []
    for item in all_category_items:
        item_name = item[0]
        if category == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" and "—Å—É–º–æ–∫" in item_name.lower() and "—Å—Ä–µ–¥–Ω—è—è" in item_name.lower():
            allowed_items.append(item)
        elif category == "–§—É—Ä–Ω–∏—Ç—É—Ä–∞" and "—Å—É–º–æ–∫" in item_name.lower() and "—Å—Ä–µ–¥–Ω—è—è" in item_name.lower():
            allowed_items.append(item)
        elif category == "–ù–∏—Ç–∫–∏" and "—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ" in item_name.lower():
            allowed_items.append(item)
        elif category == "–•–∏–º–∏—è" and "–º–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—ã–µ" in item_name.lower():
            allowed_items.append(item)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    if allowed_items:
        for item in allowed_items:
            item_name = item[0]
            item_price = item[1]
            
            can_afford = balance >= item_price
            item_text = f"{item_name} - {item_price} –º–æ–Ω–µ—Ç"
            
            if not can_afford:
                item_text += " ‚ùå"
            
            callback_data = f"buy_bag_retry_{item_name.replace(' ', '_')}" if can_afford else "cant_afford"
            
            builder.button(
                text=item_text,
                callback_data=callback_data
            )
    else:
        builder.button(
            text="üö´ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤",
            callback_data="not_needed"
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bag_retry_shop_menu")
    builder.adjust(1)
    keyboard = builder.as_markup()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_caption(
            caption=f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    await state.update_data(current_category=category, player_balance=balance)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏
@tutorial_router.callback_query(F.data == "back_to_bag_retry_shop_menu")
async def back_to_bag_retry_shop_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: back_to_bag_retry_shop_menu –≤—ã–∑–≤–∞–Ω")
    
    try:
        data = await state.get_data()
        player_id = data.get('player_id')
        
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 3000
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory = tutorial_db.get_tutorial_inventory(player_id)
        inventory_items = [item[0] for item in inventory]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ø–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        required_items = [
            "–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (—Å—Ä–µ–¥–Ω—è—è)",
            "–°—Ä–µ–¥–Ω—è—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫", 
            "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∏—Ç–∫–∏",
            "–ú–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—ã–µ —Å–º–µ—Å–∏"
        ]
        has_all_items = all(item in inventory_items for item in required_items)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        allowed_categories = [
            ("üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—É–º–æ–∫", "shop_bag_retry_materials"),
            ("üìé –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫", "shop_bag_retry_hardware"),
            ("üß∂ –ù–∏—Ç–∫–∏", "shop_bag_retry_threads"),
            ("üß™ –•–∏–º–∏—è", "shop_bag_retry_chemistry")
        ]
        
        keyboard_buttons = []
        for category_text, callback_data in allowed_categories:
            keyboard_buttons.append([InlineKeyboardButton(
                text=category_text, 
                callback_data=callback_data
            )])
        
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π"
        if has_all_items:
            keyboard_buttons.append([InlineKeyboardButton(
                text="üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π", 
                callback_data="bag_retry_go_home"
            )])
        else:
            keyboard_buttons.append([InlineKeyboardButton(
                text="üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π (–∫—É–ø–∏—Ç–µ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)", 
                callback_data="bag_retry_shop_not_ready"
            )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_caption(
            caption=f"–î–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_bag_retry_shop_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏
@tutorial_router.callback_query(F.data.startswith("buy_bag_retry_"))
async def buy_bag_retry_item(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å—É–º–∫–∏"""
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: buy_bag_retry_item –≤—ã–∑–≤–∞–Ω —Å {callback.data}")
    
    try:
        data = await state.get_data()
        player_id = data.get('player_id')
        current_category = data.get('current_category', '')
        
        if not player_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        item_name = callback.data.replace("buy_bag_retry_", "").replace("_", " ")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 3000
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_category_items = tutorial_db.get_shop_items_by_category(current_category)
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä
        item_info = None
        for item in all_category_items:
            if item[0] == item_name:
                item_info = item
                break
        
        if not item_info:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        item_price = item_info[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if balance < item_price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory = tutorial_db.get_tutorial_inventory(player_id)
        for inv_item in inventory:
            if len(inv_item) > 0 and inv_item[0] == item_name:
                await callback.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        new_balance = balance - item_price
        success = tutorial_db.add_to_tutorial_inventory(player_id, item_name, current_category)
        
        if success:
            tutorial_db.update_player_balance(player_id, new_balance)
            await back_to_bag_retry_shop_menu(callback, state)
            await callback.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item_name}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ buy_bag_retry_item: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–π—Ç–∏ –±–µ–∑ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞)
@tutorial_router.callback_query(F.data == "bag_retry_shop_not_ready")
async def bag_retry_shop_not_ready(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–π—Ç–∏ –±–µ–∑ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    inventory_items = [item[0] for item in inventory]
    
    required_items = [
        "–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (—Å—Ä–µ–¥–Ω—è—è)",
        "–°—Ä–µ–¥–Ω—è—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫",
        "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∏—Ç–∫–∏", 
        "–ú–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—ã–µ —Å–º–µ—Å–∏"
    ]
    missing_items = [item for item in required_items if item not in inventory_items]
    
    if missing_items:
        missing_text = ", ".join(missing_items)
        await callback.answer(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing_text}", show_alert=True)
    else:
        await callback.answer("‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É–ø–ª–µ–Ω—ã, –º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–æ–º–æ–π")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π" (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞) - –≠—Ç–∞–ø 30
@tutorial_router.callback_query(F.data == "bag_retry_go_home")
async def bag_retry_go_home(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–π –º–∏–Ω–∏-–∏–≥—Ä—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å—É–º–∫–∏ - –≠—Ç–∞–ø 30"""
    print("üéØ –û–¢–õ–ê–î–ö–ê: bag_retry_go_home –≤—ã–∑–≤–∞–Ω")
    
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_retry_start")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 30
    stage30_text = (
        "–í–æ–æ—Ä—É–∂–∏–≤—à–∏—Å—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ–π –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–æ–π, –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ. "
        "–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—ã –ø–æ–¥–æ—à–ª–∏ –∫ –¥–µ–ª—É –±–æ–ª–µ–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: –Ω–∞—à–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª –æ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ "
        "–∏ –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞–∑–ª–æ–∂–∏–ª–∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –Ω–∞ —Å—Ç–æ–ª–µ."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    stage30_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî® –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ", callback_data="bag_retry_start")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 30
    image_path = "images/tutorial/bag_retry_start.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage30_text,
            reply_markup=stage30_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage30_text,
            reply_markup=stage30_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_retry_start)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ" - –≠—Ç–∞–ø 31
@tutorial_router.callback_query(F.data == "bag_retry_start")
async def bag_retry_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –≠—Ç–∞–ø 31"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_retry_materials")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 31
    stage31_text = (
        "–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö ‚Äî –¥–æ–±—Ä–æ—Ç–Ω–∞—è –∫–æ–∂–∞ –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    material_items = [item[0] for item in inventory if any(keyword in item[0].lower() for keyword in ["–∫–æ–∂–∞", "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞"])]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    await state.update_data(selected_bag_retry_materials=[])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    keyboard_buttons = []
    for item_name in material_items:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üîò {item_name}", 
            callback_data=f"toggle_bag_retry_material_{item_name.replace(' ', '_')}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)", 
        callback_data="bag_retry_materials_not_selected"
    )])
    
    materials_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 31
    image_path = "images/tutorial/bag_retry_materials.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage31_text,
            reply_markup=materials_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage31_text,
            reply_markup=materials_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_retry_materials)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –≠—Ç–∞–ø 31
@tutorial_router.callback_query(F.data.startswith("toggle_bag_retry_material_"))
async def toggle_bag_retry_material_selection(callback: CallbackQuery, state: FSMContext):
    """Toggle –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å—É–º–∫–∏"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_materials = data.get('selected_bag_retry_materials', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    material_name = callback.data.replace("toggle_bag_retry_material_", "").replace("_", " ")
    
    # Toggle –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    if material_name in selected_materials:
        selected_materials.remove(material_name)
        await callback.answer(f"‚ùå {material_name} - –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        selected_materials.append(material_name)
        await callback.answer(f"‚úÖ {material_name} - –≤—ã–±—Ä–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_bag_retry_materials=selected_materials)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    material_items = [item[0] for item in inventory if any(keyword in item[0].lower() for keyword in ["–∫–æ–∂–∞", "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞"])]
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    for item_name in material_items:
        emoji = "‚úÖ" if item_name in selected_materials else "üîò"
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"{emoji} {item_name}", 
            callback_data=f"toggle_bag_retry_material_{item_name.replace(' ', '_')}"
        )])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    required_materials = ["–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (—Å—Ä–µ–¥–Ω—è—è)", "–°—Ä–µ–¥–Ω—è—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫"]
    all_required_selected = all(material in selected_materials for material in required_materials)
    
    if all_required_selected:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            callback_data="bag_retry_materials_confirmed"
        )])
    else:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)", 
            callback_data="bag_retry_materials_not_selected"
        )])
    
    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
    except Exception as e:
        await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞)
@tutorial_router.callback_query(F.data == "bag_retry_materials_not_selected")
async def bag_retry_materials_not_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    data = await state.get_data()
    selected_materials = data.get('selected_bag_retry_materials', [])
    
    required_materials = ["–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (—Å—Ä–µ–¥–Ω—è—è)", "–°—Ä–µ–¥–Ω—è—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫"]
    missing_materials = [material for material in required_materials if material not in selected_materials]
    
    if missing_materials:
        missing_text = ", ".join(missing_materials)
        await callback.answer(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã: {missing_text}", show_alert=True)
    else:
        await callback.answer("‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞) - –≠—Ç–∞–ø 32
@tutorial_router.callback_query(F.data == "bag_retry_materials_confirmed")
async def bag_retry_materials_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –≠—Ç–∞–ø 32"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_materials = data.get('selected_bag_retry_materials', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä
    required_materials = ["–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (—Å—Ä–µ–¥–Ω—è—è)", "–°—Ä–µ–¥–Ω—è—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫"]
    if not all(material in selected_materials for material in required_materials):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_retry_tools")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 32
    stage32_text = (
        "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ –∂–µ, –Ω–æ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Ä–∞–±–æ—Ç–∞ –ø–æ—à–ª–∞ –∏–Ω–∞—á–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    tool_items = []
    for item in inventory:
        item_name = item[0]
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª"]):
            tool_items.append(item_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    await state.update_data(selected_bag_retry_tools=[])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    keyboard_buttons = []
    for tool_name in tool_items:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ callback_data
        if tool_name == "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂":
            callback_data = "toggle_bag_retry_tool_knife"
        elif tool_name == "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG":
            callback_data = "toggle_bag_retry_tool_punch"
        elif tool_name == "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏":
            callback_data = "toggle_bag_retry_tool_punch_set"
        elif tool_name == "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1":
            callback_data = "toggle_bag_retry_tool_multitool"
        else:
            callback_data = f"toggle_bag_retry_tool_{tool_name.replace(' ', '_').lower()[:15]}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üîò {tool_name}", 
            callback_data=callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
        callback_data="bag_retry_tools_not_selected"
    )])
    
    tools_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 32
    image_path = "images/tutorial/bag_retry_tools.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage32_text,
            reply_markup=tools_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage32_text,
            reply_markup=tools_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_retry_tools)
    await callback.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –≠—Ç–∞–ø 32
@tutorial_router.callback_query(F.data.startswith("toggle_bag_retry_tool_"))
async def toggle_bag_retry_tool_selection(callback: CallbackQuery, state: FSMContext):
    """Toggle –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å—É–º–∫–∏"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_bag_retry_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
    tool_code = callback.data.replace("toggle_bag_retry_tool_", "")
    
    tool_map = {
        "knife": "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂",
        "punch": "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", 
        "punch_set": "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏",
        "multitool": "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"
    }
    
    tool_name = tool_map.get(tool_code)
    if not tool_name:
        tool_name = tool_code.replace('_', ' ')
    
    # Toggle –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if tool_name in selected_tools:
        selected_tools.remove(tool_name)
        await callback.answer(f"‚ùå {tool_name} - –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        selected_tools.append(tool_name)
        await callback.answer(f"‚úÖ {tool_name} - –≤—ã–±—Ä–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(selected_bag_retry_tools=selected_tools)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    tool_items = []
    for item in inventory:
        item_name = item[0]
        if any(keyword in item_name.lower() for keyword in ["–Ω–æ–∂", "–ø—Ä–æ–±–æ–π–Ω–∏–∫", "–º—É–ª—å—Ç–∏—Ç—É–ª"]):
            tool_items.append(item_name)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    for tool_name in tool_items:
        emoji = "‚úÖ" if tool_name in selected_tools else "üîò"
        
        # –°–æ–∑–¥–∞–µ–º callback_data –∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        if tool_name == "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂":
            callback_data = "toggle_bag_retry_tool_knife"
        elif tool_name == "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG":
            callback_data = "toggle_bag_retry_tool_punch"
        elif tool_name == "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏":
            callback_data = "toggle_bag_retry_tool_punch_set"
        elif tool_name == "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1":
            callback_data = "toggle_bag_retry_tool_multitool"
        else:
            callback_data = f"toggle_bag_retry_tool_{tool_name.replace(' ', '_').lower()[:15]}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"{emoji} {tool_name}", 
            callback_data=callback_data
        )])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    all_required_selected = all(tool in selected_tools for tool in required_tools)
    
    if all_required_selected:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
            callback_data="bag_retry_tools_confirmed"
        )])
    else:
        keyboard_buttons.append([InlineKeyboardButton(
            text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)", 
            callback_data="bag_retry_tools_not_selected"
        )])
    
    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
    except Exception as e:
        await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞)
@tutorial_router.callback_query(F.data == "bag_retry_tools_not_selected")
async def bag_retry_tools_not_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    data = await state.get_data()
    selected_tools = data.get('selected_bag_retry_tools', [])
    
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    missing_tools = [tool for tool in required_tools if tool not in selected_tools]
    
    if missing_tools:
        missing_text = ", ".join(missing_tools)
        await callback.answer(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã: {missing_text}", show_alert=True)
    else:
        await callback.answer("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞) - –≠—Ç–∞–ø 33
@tutorial_router.callback_query(F.data == "bag_retry_tools_confirmed")
async def bag_retry_tools_confirmed(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–∂–∏ - –≠—Ç–∞–ø 33"""
    data = await state.get_data()
    player_id = data.get('player_id')
    selected_tools = data.get('selected_bag_retry_tools', [])
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä
    required_tools = ["–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–°—Ç—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ PFG", "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1"]
    if not all(tool in selected_tools for tool in required_tools):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_retry_wax")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 33
    stage33_text = (
        "–í–∞–º –ø–æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —Ö–æ—Ä–æ—à—É—é –∫–æ–∂—É –¥–∞–∂–µ –∫—Ä–æ–∏—Ç—å –ª–µ–≥—á–µ. –û–Ω–∞ –Ω–µ —Ç–∞–∫–∞—è —Å—É—Ö–∞—è, —Ç–µ–∫—Å—Ç—É—Ä–∞ —É –Ω–µ—ë –±–æ–ª–µ–µ —Ä–æ–≤–Ω–∞—è, "
        "–∏ –Ω–∞ –Ω–µ–π –º–µ–Ω—å—à–µ —Ç–æ—á–µ–∫ –∏ —Ü–∞—Ä–∞–ø–∏–Ω.\n\n"
        "–¢–µ–ø–µ—Ä—å ‚Äî –≤–∞–∂–Ω—ã–π —ç—Ç–∞–ø –∑–∞—â–∏—Ç—ã –æ—Ç –≤–æ–¥—ã. –ú–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤–∞—è —Å–º–µ—Å—å –∏–º–µ–µ—Ç –ø–∞—Å—Ç–æ–æ–±—Ä–∞–∑–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –∏ –ª–µ–≥—á–µ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –∫–æ–∂—É. "
        "–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –≤–æ—Å–∫–∞, –µ—ë –Ω–µ –Ω—É–∂–Ω–æ —Ç–æ–ø–∏—Ç—å –∏ —Ç–µ—Ä–µ—Ç—å —à–µ—Ä—Å—Ç—è–Ω–æ–π —Ç—Ä—è–ø–æ—á–∫–æ–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—É—é —Å–º–µ—Å—å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ (–º–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—ã–µ —Å–º–µ—Å–∏)
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    wax_items = [item[0] for item in inventory if "–º–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—ã–µ" in item[0].lower()]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
    keyboard_buttons = []
    for item_name in wax_items:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üß¥ {item_name}", 
            callback_data=f"select_bag_retry_wax_{item_name.replace(' ', '_')}"
        )])
    
    wax_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 33
    image_path = "images/tutorial/bag_retry_wax.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage33_text,
            reply_markup=wax_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage33_text,
            reply_markup=wax_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_retry_wax)
    await callback.answer("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤–æ–π —Å–º–µ—Å–∏ - –≠—Ç–∞–ø 34
@tutorial_router.callback_query(F.data.startswith("select_bag_retry_wax_"))
async def select_bag_retry_wax(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤–æ–π —Å–º–µ—Å–∏ - –≠—Ç–∞–ø 34"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Å–∏
    wax_name = callback.data.replace("select_bag_retry_wax_", "").replace("_", " ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_retry_threads")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 34
    stage34_text = (
        "–°–º–µ—Å—å –ª–µ–≥–ª–∞ —Ä–æ–≤–Ω—ã–º, –º–∞—Ç–æ–≤—ã–º —Å–ª–æ–µ–º, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—è —Ñ–∞–∫—Ç—É—Ä—É –∫–æ–∂–∏ –∏ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—è –ª–∏–ø–∫–∏—Ö –ø—è—Ç–µ–Ω. –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–±–æ—Ä–∫–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏—Ç–∫–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ (–Ω–∏—Ç–∫–∏)
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    thread_items = [item[0] for item in inventory if "–Ω–∏—Ç–∫–∏" in item[0].lower()]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –Ω–∏—Ç–æ–∫
    keyboard_buttons = []
    for item_name in thread_items:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üßµ {item_name}", 
            callback_data=f"select_bag_retry_thread_{item_name.replace(' ', '_')}"
        )])
    
    threads_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 34
    image_path = "images/tutorial/bag_retry_threads.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage34_text,
            reply_markup=threads_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage34_text,
            reply_markup=threads_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_retry_threads)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {wax_name}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—Ç–æ–∫ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞) - –≠—Ç–∞–ø 35
@tutorial_router.callback_query(F.data.startswith("select_bag_retry_thread_"))
async def select_bag_retry_thread(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∏—Ç–æ–∫ –¥–ª—è —Å–±–æ—Ä–∫–∏ (–≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞) - –≠—Ç–∞–ø 35"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏—Ç–æ–∫
    thread_name = callback.data.replace("select_bag_retry_thread_", "").replace("_", " ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_bag_quality_2")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 35
    stage35_text = (
        "–ù–∞ –∫—Ä–æ–π, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Å–±–æ—Ä–∫—É —É –≤–∞—Å —É—à–ª–æ –ø–∞—Ä—É –≤–µ—á–µ—Ä–æ–≤.\n\n"
        "‚Ä¢ –ú—É–ª—å—Ç–∏—Ç—É–ª –æ—Å—Ç–∞–≤–ª—è–ª –∂–µ–ª–∞—Ç—å –ª—É—á—à–µ–≥–æ, –Ω–æ —Å —ç—Ç–æ–π –∫–æ–∂–µ–π –±—ã–ª–æ —á—É—Ç—å –ø—Ä–æ—â–µ\n"
        "‚Ä¢ –û—Ç–≤–µ—Ä—Å—Ç–∏—è –ø–æ–¥ —à–æ–≤ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ –ø—Ä–æ–±–∏–≤–∞–ª–∏ —á—ë—Ç–∫–æ –∏ —á–∏—Å—Ç–æ\n"
        "‚Ä¢ –ú–æ–ª–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Ñ—É—Ä–Ω–∏—Ç—É—Ä–µ —Å–∫–æ–ª—å–∑–∏–ª–∞ –ø–ª–∞–≤–Ω–æ, –∞ –∫–Ω–æ–ø–∫–∏ –∑–∞—â—ë–ª–∫–∏–≤–∞–ª–∏—Å—å —Å –ø—Ä–∏—è—Ç–Ω—ã–º, —Ç—É–≥–∏–º —â–µ–ª—á–∫–æ–º\n"
        "‚Ä¢ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–∏—Ç—å –Ω–µ –∑–∞–∫—Ä—É—á–∏–≤–∞–ª–∞—Å—å –∏ –Ω–µ –∑–∞–≤—è–∑—ã–≤–∞–ª–∞—Å—å —É–∑–ª–∞–º–∏\n\n"
        "–ö–æ–Ω–µ—á–Ω–æ, –¥–æ –∏–¥–µ–∞–ª–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ, –Ω–æ –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö —Ç–µ–ø–µ—Ä—å –≤–ø–æ–ª–Ω–µ —Å–µ–±–µ –¥–æ–±—Ä–æ—Ç–Ω–∞—è, –∫—Ä–µ–ø–∫–∞—è —Å—É–º–∫–∞."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    stage35_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="bag_evaluate_quality_2")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 35
    image_path = "images/tutorial/bag_result_2.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage35_text,
            reply_markup=stage35_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage35_text,
            reply_markup=stage35_keyboard
        )
    
    await state.set_state(TutorialStates.waiting_for_bag_quality_2)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {thread_name}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –≠—Ç–∞–ø 36
@tutorial_router.callback_query(F.data == "bag_evaluate_quality_2")
async def bag_evaluate_quality_2(callback: CallbackQuery, state: FSMContext):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å—É–º–∫–∏ - –≠—Ç–∞–ø 36"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_final")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    
    # –†–∞–Ω–¥–æ–º 50/50 –æ–±—ã—á–Ω—ã–π/–æ—Ç–ª–∏—á–Ω—ã–π
    import random
    quality = "–û–±—ã—á–Ω–æ–µ" if random.random() < 0.5 else "–û—Ç–ª–∏—á–Ω–æ–µ"
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    quality_text = f"–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞ ‚Äì {quality}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
    image_path = f"images/tutorial/quality_{quality.lower()}.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=quality_text
        )
    except Exception as e:
        await callback.message.answer(quality_text)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    materials_to_remove = [
        "–ö–æ–∂–∞ –¥–ª—è —Å—É–º–æ–∫ (—Å—Ä–µ–¥–Ω—è—è)",
        "–°—Ä–µ–¥–Ω—è—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å—É–º–æ–∫", 
        "–ú–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—ã–µ —Å–º–µ—Å–∏"
    ]
    
    for material in materials_to_remove:
        for item in inventory:
            if item[0] == material:
                # –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                conn = tutorial_db.get_connection()
                try:
                    conn.execute(
                        'DELETE FROM tutorial_inventory WHERE player_id = ? AND item_name = ?',
                        (player_id, material)
                    )
                    conn.commit()
                finally:
                    conn.close()
                break
    
    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—É –æ–±—É—á–µ–Ω–∏—è (—ç—Ç–∞–ø 37)
    await show_final_menu(callback, state)
    
    await callback.answer()

# –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è - –≠—Ç–∞–ø 37
async def show_final_menu(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è - –≠—Ç–∞–ø 37"""
    data = await state.get_data()
    player_id = data.get('player_id')
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞ 37
    stage37_text = (
        "–ü–æ–≤–µ—Å–∏–≤ –Ω–∞ –ø–ª–µ—á–æ –Ω–æ–≤—É—é, —Å–¥–µ–ª–∞–Ω–Ω—É—é —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏ —Å—É–º–∫—É, –≤—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≥–æ—Ä–¥–æ—Å—Ç—å, –Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö. "
        "–í–∞—à–µ —Ö–æ–±–±–∏ –ø–µ—Ä–µ—à–ª–æ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.\n\n"
        "–ö –≤–∞–º —Å—Ç–∞–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–Ω–∞–∫–æ–º—ã–µ –∏ –∑–Ω–∞–∫–æ–º—ã–µ –≤–∞—à–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö: '–Ø —Å–ª—ã—à–∞–ª, —Ç—ã –∫–ª–∞—Å—Å–Ω—ã–µ –≤–µ—â–∏ –¥–µ–ª–∞–µ—à—å! "
        "–°–º–æ–∂–µ—à—å –º–Ω–µ –∫–æ—à–µ–ª—ë–∫/—Ä–µ–º–µ–Ω—å/—á–µ—Ö–æ–ª —Å–º–∞—Å—Ç–µ—Ä–∏—Ç—å?'\n\n"
        "–¢–∞–∫ –≤–∞—à–µ —É–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–æ—Å—å –≤ –º–∞–ª–µ–Ω—å–∫—É—é, –Ω–æ –≥–æ—Ä–¥—É—é ¬´–ú–∞—Å—Ç–µ—Ä—Å–∫—É—é –¥–ª—è –î—É—à–∏¬ª. "
        "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç—Ç–∞—á–∏–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—è –∏—Ö –∏–∑ '–æ–±—ã—á–Ω—ã—Ö' –≤ '–æ—Ç–ª–∏—á–Ω—ã–µ'."
    )
    
    # –ì–ª–∞–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é
    final_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data="soon_available")],
        [InlineKeyboardButton(text="üõ†Ô∏è –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="soon_available")],
        [InlineKeyboardButton(text="üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="soon_available")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="soon_available")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    image_path = "images/tutorial/final_menu.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=stage37_text,
            reply_markup=final_keyboard
        )
    except Exception as e:
        await callback.message.answer(
            stage37_text,
            reply_markup=final_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "—Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ"
@tutorial_router.callback_query(F.data == "soon_available")
async def soon_available(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã"""
    await callback.answer("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
@tutorial_router.callback_query(F.data == "not_available")
async def not_available(callback: CallbackQuery):
    await callback.answer("‚ùå –ü–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å", show_alert=True)

@tutorial_router.callback_query(F.data == "cant_afford")
async def cant_afford(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

@tutorial_router.callback_query(F.data == "not_in_tutorial")
async def not_in_tutorial(callback: CallbackQuery):
    await callback.answer("‚ùå –°–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å", show_alert=True)

# –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è
@tutorial_router.callback_query(F.data == "start_tutorial")
async def start_tutorial(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    active_player = db.get_active_player(user_id)
    if not active_player:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    player_id = active_player[0]  # ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    tutorial_db.init_tutorial_progress(player_id)
    tutorial_db.init_shop_items()
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –°–†–ê–ó–£ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ö–æ–¥—É –≤ –º–∞–≥–∞–∑–∏–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞)
    await enter_shop(callback, state)
    
    await state.set_state(TutorialStates.waiting_for_shop_enter)
    await state.update_data(player_id=player_id, player_balance=2000)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
@tutorial_router.callback_query(F.data == "enter_shop")
async def enter_shop(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player_id = data.get('player_id')

    await state.set_state(TutorialStates.waiting_for_approach)
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_approach")
    
    active_player = db.get_active_player(callback.from_user.id)
    player_name = active_player[2] if active_player else "–ò–≥—Ä–æ–∫"
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
    image_path = "images/tutorial/shop_entrance.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–í–æ–π–¥—è –≤ –º–∞–≥–∞–∑–∏–Ω –≤—ã –≤–∏–¥–µ—Ç–µ –≤–¥–æ–ª—å —Å—Ç–µ–Ω –∫–æ–∂–∏, –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã–µ –Ω–∞ –∫—Ä—é—á–æ–∫. –° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –±—ã–ª–∏ —Å—Ç–µ–ª–ª–∞–∂–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–∂–∞ –ª–µ–∂–∞–ª–∞ –≤ —Ä—É–ª–æ–Ω–∞—Ö. –û—Ç–¥–µ–ª—å–Ω–æ –≤ —É–≥–ª—É –±—ã–ª–∏ –≤–∏—Ç—Ä–∏–Ω—ã —Å –∫–∞–∫–∏–º–∏-—Ç–æ –ø—Ä–∏—á—É–¥–ª–∏–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –ü–æ—Ö–æ–∂–∏–µ –≤—ã –≤–∏–¥–µ–ª–∏ –Ω–∞ Youtube, –Ω–æ —ç—Ç–∏ –æ—Ç–ª–∏—á–∞–ª–∞—Å—å.\n\n–ü–æ–±—Ä–æ–¥—è –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –≤—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏ —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å. –î–µ—Å—è—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∫–æ–∂. –¶–≤–µ—Ç–Ω—ã–µ –∏ –Ω–µ —Ü–≤–µ—Ç–Ω—ã–µ, –º—è–≥–∫–∏–µ –∏ –ø–ª–æ—Ç–Ω—ã–µ, –≥–ª–∞–¥–∫–∏–µ –∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π, –∞ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—á–µ–≥–æ. –î–µ–≤—É—à–∫–∏-—Å–æ—Ç—Ä—É–¥–Ω–∏—Ü—ã, –±–µ–≥–∞–ª–∏, –º–∏–º–æ –∏ –≤—ã —É–∂–µ —Ä–µ—à–∏–ª –ø—Ä–∏–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.\n\n–ù–æ —Ç—É—Ç –≤—ã —É–≤–∏–¥–µ–ª–∏ –º—É–∂–∏—á–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —á—Ç–æ-—Ç–æ –±–æ–π–∫–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π. –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–¥–æ–π—Ç–∏ –ø–æ–±–ª–∏–∂–µ –∏ –ø–æ—Å–ª—É—à–∞—Ç—å.",
            reply_markup=get_approach_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"–í–æ–π–¥—è –≤ –º–∞–≥–∞–∑–∏–Ω –≤—ã –≤–∏–¥–µ—Ç–µ –≤–¥–æ–ª—å —Å—Ç–µ–Ω –∫–æ–∂–∏, –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã–µ –Ω–∞ –∫—Ä—é—á–æ–∫. –° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –±—ã–ª–∏ —Å—Ç–µ–ª–ª–∞–∂–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–∂–∞ –ª–µ–∂–∞–ª–∞ –≤ —Ä—É–ª–æ–Ω–∞—Ö. –û—Ç–¥–µ–ª—å–Ω–æ –≤ —É–≥–ª—É –±—ã–ª–∏ –≤–∏—Ç—Ä–∏–Ω—ã —Å –∫–∞–∫–∏–º–∏-—Ç–æ –ø—Ä–∏—á—É–¥–ª–∏–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –ü–æ—Ö–æ–∂–∏–µ –≤—ã –≤–∏–¥–µ–ª–∏ –Ω–∞ Youtube, –Ω–æ —ç—Ç–∏ –æ—Ç–ª–∏—á–∞–ª–∞—Å—å.\n\n–ü–æ–±—Ä–æ–¥—è –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –≤—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏ —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å. –î–µ—Å—è—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∫–æ–∂. –¶–≤–µ—Ç–Ω—ã–µ –∏ –Ω–µ —Ü–≤–µ—Ç–Ω—ã–µ, –º—è–≥–∫–∏–µ –∏ –ø–ª–æ—Ç–Ω—ã–µ, –≥–ª–∞–¥–∫–∏–µ –∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π, –∞ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—á–µ–≥–æ. –î–µ–≤—É—à–∫–∏-—Å–æ—Ç—Ä—É–¥–Ω–∏—Ü—ã, –±–µ–≥–∞–ª–∏, –º–∏–º–æ –∏ –≤—ã —É–∂–µ —Ä–µ—à–∏–ª –ø—Ä–∏–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.\n\n–ù–æ —Ç—É—Ç –≤—ã —É–≤–∏–¥–µ–ª–∏ –º—É–∂–∏—á–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —á—Ç–æ-—Ç–æ –±–æ–π–∫–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π. –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–¥–æ–π—Ç–∏ –ø–æ–±–ª–∏–∂–µ –∏ –ø–æ—Å–ª—É—à–∞—Ç—å.",
            reply_markup=get_approach_keyboard()
        )
    
    await state.set_state(TutorialStates.waiting_for_approach)
    tutorial_db.update_tutorial_progress(data.get('player_id'), "waiting_for_approach")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ö–æ–¥–∞ –ø–æ–±–ª–∏–∂–µ
@tutorial_router.callback_query(F.data == "approach_closer")
async def approach_closer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player_id = data.get('player_id')
    
    await state.set_state(TutorialStates.waiting_for_oldman_approach)
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_oldman_approach")

    active_player = db.get_active_player(callback.from_user.id)
    player_name = active_player[2] if active_player else "–ò–≥—Ä–æ–∫"
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    image_path = "images/tutorial/oldman_talking.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–í—Å—Ç–∞–≤ –≤ –ø–∞—Ä–µ —à–∞–≥–æ–≤, –≤—ã —Å—Ç–∞–ª–∏ —Å–ª—É—à–∞—Ç—å, –¥–µ–ª–∞—è –≤–∏–¥, —á—Ç–æ —á—Ç–æ-—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ. –ú—É–∂–∏—á–æ–∫ –æ—á–µ–Ω—å —É–≤–ª–µ—á–µ–Ω–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª, –∫–∞–∫ –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—Ä–∞—è –∫–æ—à–µ–ª—å–∫–∞. –ß—Ç–æ-—Ç–æ –ø—Ä–æ —Ç–æ, —á—Ç–æ —É –Ω–µ–≥–æ –ö–ú–°, –ø—Ä–∞–≤–¥–∞ –≤—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª–∏ –ø–æ –∫–∞–∫–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞. –ò –∫–∞–∫–æ–π-—Ç–æ —Å–ª–∏–∫–µ—Ä.\n\n–ë—É–∫–≤–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, –µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–±–µ–∂–∞–ª, –∞ –≤—ã —Ä–µ—à–∏–ª–∏, –ø–æ—Ä–æ—Å–∏—Ç–µ —É –º—É–∂–∏—á–∫–∞ —Å–æ–≤–µ—Ç —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_oldman_approach_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"–í—Å—Ç–∞–≤ –≤ –ø–∞—Ä–µ —à–∞–≥–æ–≤, –≤—ã —Å—Ç–∞–ª–∏ —Å–ª—É—à–∞—Ç—å, –¥–µ–ª–∞—è –≤–∏–¥, —á—Ç–æ —á—Ç–æ-—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ. –ú—É–∂–∏—á–æ–∫ –æ—á–µ–Ω—å —É–≤–ª–µ—á–µ–Ω–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª, –∫–∞–∫ –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—Ä–∞—è –∫–æ—à–µ–ª—å–∫–∞. –ß—Ç–æ-—Ç–æ –ø—Ä–æ —Ç–æ, —á—Ç–æ —É –Ω–µ–≥–æ –ö–ú–°, –ø—Ä–∞–≤–¥–∞ –≤—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª–∏ –ø–æ –∫–∞–∫–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞. –ò –∫–∞–∫–æ–π-—Ç–æ —Å–ª–∏–∫–µ—Ä.\n\n–ë—É–∫–≤–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, –µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–±–µ–∂–∞–ª, –∞ –≤—ã —Ä–µ—à–∏–ª–∏, –ø–æ—Ä–æ—Å–∏—Ç–µ —É –º—É–∂–∏—á–∫–∞ —Å–æ–≤–µ—Ç —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_oldman_approach_keyboard()
        )
    
    await state.set_state(TutorialStates.waiting_for_oldman_approach)
    tutorial_db.update_tutorial_progress(data.get('player_id'), "waiting_for_oldman_approach")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ì–µ–Ω–µ
@tutorial_router.callback_query(F.data == "approach_oldman")
async def approach_oldman(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player_id = data.get('player_id')
    
    await state.set_state(TutorialStates.waiting_for_showcase)
    tutorial_db.update_tutorial_progress(player_id, "waiting_for_showcase")
    
    active_player = db.get_active_player(callback.from_user.id)
    player_name = active_player[2] if active_player else "–ò–≥—Ä–æ–∫"
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    image_path = "images/tutorial/oldman_close.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–í—ã –ø–æ–¥–æ—à–ª–∏, –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å –∏ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–æ–∂–∏"
        )
    except Exception as e:
        await callback.message.answer(
            f"–í—ã –ø–æ–¥–æ—à–ª–∏, –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å –∏ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–æ–∂–∏"
        )
    
    # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await asyncio.sleep(3)
    
    image_path = "images/tutorial/shop_showcase.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–ù—É –∑–¥–∞—Ä–æ–≤–∞! –ú–µ–Ω—è –ì–µ–Ω–Ω–∞–¥–∏–µ–º –ë–æ—Ä–∏—Å–æ–≤–∏—á–µ–º –∑–≤–∞—Ç—å. –ù–æ –∑–æ–≤–∏ –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ –ì–µ–Ω–∞. –î–∞–≤–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É. –ì–æ–≤–æ—Ä–∏—à—å —Ä–µ–º–µ–Ω—å —Å–µ–±–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?\n\n–¢–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏. –ú–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–±–µ –Ω–µ –Ω–∞–¥–æ: –Ω–æ–∂, –ø—Ä–æ–±–æ–π–Ω–∏–∫, –º–æ–ª–æ—Ç–æ–∫, —Ç–æ—Ä—Ü–±–∏–ª, —Å–ª–∏–∫–µ—Ä –∏ –æ—Ç–≤–µ—Ä—Ç–∫–∞, –∫–æ—Ç–æ—Ä–æ–π –≤–∏–Ω—Ç–∏–∫–∏ –∑–∞–∫—Ä—É—Ç–∏—à—å. –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–µ–Ω–µ–≥? –£—Ö, –Ω–µ –º–Ω–æ–≥–æ. –ü—Ä–∏–¥–µ—Ç—Å—è –ø–æ—Å–∫—Ä–æ–º–Ω–µ–µ –ø—Ä–∏–∫—É–ø–∏—Ç—å. –Ø-—Ç–æ —É–∂–µ –¥–∞–≤–Ω–æ –∑–∞–Ω–∏–º–∞—é—Å—å, —É –º–µ–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç Wuta. –ù–µ –∑–Ω–∞–µ—à—å? –ù—É –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –¥–æ—Ä–∞—Å—Ç–µ—à—å.\n\n(–ø—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ-—Ç–æ –ì–µ–Ω–Ω–∞–¥–∏–π –ë–æ—Ä–∏—Å–æ–≤–∏—á –æ—Ç–≤–µ–ª –≤–∞—Å –∫ –≤–∏—Ç—Ä–∏–Ω–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏)",
            reply_markup=get_showcase_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"–ù—É –∑–¥–∞—Ä–æ–≤–∞! –ú–µ–Ω—è –ì–µ–Ω–Ω–∞–¥–∏–µ–º –ë–æ—Ä–∏—Å–æ–≤–∏—á–µ–º –∑–≤–∞—Ç—å. –ù–æ –∑–æ–≤–∏ –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ –ì–µ–Ω–∞. –î–∞–≤–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É. –ì–æ–≤–æ—Ä–∏—à—å —Ä–µ–º–µ–Ω—å —Å–µ–±–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?\n\n–¢–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏. –ú–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–±–µ –Ω–µ –Ω–∞–¥–æ: –Ω–æ–∂, –ø—Ä–æ–±–æ–π–Ω–∏–∫, –º–æ–ª–æ—Ç–æ–∫, —Ç–æ—Ä—Ü–±–∏–ª, —Å–ª–∏–∫–µ—Ä –∏ –æ—Ç–≤–µ—Ä—Ç–∫–∞, –∫–æ—Ç–æ—Ä–æ–π –≤–∏–Ω—Ç–∏–∫–∏ –∑–∞–∫—Ä—É—Ç–∏—à—å. –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–µ–Ω–µ–≥? –£—Ö, –Ω–µ –º–Ω–æ–≥–æ. –ü—Ä–∏–¥–µ—Ç—Å—è –ø–æ—Å–∫—Ä–æ–º–Ω–µ–µ –ø—Ä–∏–∫—É–ø–∏—Ç—å. –Ø-—Ç–æ —É–∂–µ –¥–∞–≤–Ω–æ –∑–∞–Ω–∏–º–∞—é—Å—å, —É –º–µ–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç Wuta. –ù–µ –∑–Ω–∞–µ—à—å? –ù—É –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –¥–æ—Ä–∞—Å—Ç–µ—à—å.\n\n(–ø—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ-—Ç–æ –ì–µ–Ω–Ω–∞–¥–∏–π –ë–æ—Ä–∏—Å–æ–≤–∏—á –æ—Ç–≤–µ–ª –≤–∞—Å –∫ –≤–∏—Ç—Ä–∏–Ω–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏)",
            reply_markup=get_showcase_keyboard()
        )
    
    await state.set_state(TutorialStates.waiting_for_showcase)
    tutorial_db.update_tutorial_progress(data.get('player_id'), "waiting_for_showcase")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏—Ç—Ä–∏–Ω—ã
@tutorial_router.callback_query(F.data == "view_showcase")
async def view_showcase(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player_id = data.get('player_id')

    await state.set_state(TutorialStates.in_shop_menu)
    tutorial_db.update_tutorial_progress(player_id, "in_shop_menu")
    
    active_player = db.get_active_player(callback.from_user.id)
    player_name = active_player[2] if active_player else "–ò–≥—Ä–æ–∫"
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 2000  # player_balance
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–∏—Ç—Ä–∏–Ω—ã
    image_path = "images/tutorial/tools_showcase.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–í—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É, —É–∑–Ω–∞–≤–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–µ–ª–∏ –Ω–∞ Youtube. –û–Ω–∏ –±—ã–ª–∏ –º–µ–Ω—å—à–µ, —á–µ–º –∫–∞–∑–∞–ª–æ—Å—å.\n\n–ë—ã–ª–∏ —Ç–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –¥–µ—à–µ–≤—ã–µ, –∏ –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏–µ, –∫–∞–∫ –±—É–¥-—Ç–æ –∏–∑ –∑–æ–ª–æ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä—è–¥–æ–º –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –ª–µ–∂–∞–ª–∞ —à—Ç—É–∫–∞ –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –≤–∏–ª–∫—É –∑–∞ 400 –º–æ–Ω–µ—Ç –∏ –∑–∞ 20 000 –º–æ–Ω–µ—Ç. –ë–µ–∑ –ø–æ–Ω—è—Ç–∏—è –≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞.\n\n- –î–∞–≤–∞–π —Å–æ–±–µ—Ä–µ–º —Ç–µ–±–µ –Ω–∞–±–æ—Ä: –≤—ã–±–∏—Ä–∞–π –ø–æ–∫–∞ —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ, –Ω–∞ –±–æ–ª—å—à–µ —É —Ç–µ–±—è –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∏—Ç.\n–ë–µ—Ä–∏: –Ω–æ–∂, –≤—ã—Å–µ—á–Ω–æ–π –ø—Ä–æ–±–æ–π–Ω–∏–∫, —Ç–æ—Ä—Ü–±–∏–ª, —Å–ª–∏–∫–µ—Ä. –ü–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º: —Ä–µ–º–µ–Ω–Ω—É—é –ª–µ–Ω—Ç—É –¥–µ—à—ë–≤—É—é, –ø—Ä—è–∂–∫—É –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ–π–∫–∏ –∏ –ö–ú–¶ –∫–ª–µ–π. –î–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å\n\nüí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=get_shop_menu_keyboard(balance)
        )
    except Exception as e:
        await callback.message.answer(
            f"–í—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É, —É–∑–Ω–∞–≤–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–µ–ª–∏ –Ω–∞ Youtube. –û–Ω–∏ –±—ã–ª–∏ –º–µ–Ω—å—à–µ, —á–µ–º –∫–∞–∑–∞–ª–æ—Å—å.\n\n–ë—ã–ª–∏ —Ç–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –¥–µ—à–µ–≤—ã–µ, –∏ –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏–µ, –∫–∞–∫ –±—É–¥-—Ç–æ –∏–∑ –∑–æ–ª–æ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä—è–¥–æ–º –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –ª–µ–∂–∞–ª–∞ —à—Ç—É–∫–∞ –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –≤–∏–ª–∫—É –∑–∞ 400 –º–æ–Ω–µ—Ç –∏ –∑–∞ 20 000 –º–æ–Ω–µ—Ç. –ë–µ–∑ –ø–æ–Ω—è—Ç–∏—è –≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞.\n\n- –î–∞–≤–∞–π —Å–æ–±–µ—Ä–µ–º —Ç–µ–±–µ –Ω–∞–±–æ—Ä: –≤—ã–±–∏—Ä–∞–π –ø–æ–∫–∞ —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ, –Ω–∞ –±–æ–ª—å—à–µ —É —Ç–µ–±—è –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∏—Ç.\n–ë–µ—Ä–∏: –Ω–æ–∂, –≤—ã—Å–µ—á–Ω–æ–π –ø—Ä–æ–±–æ–π–Ω–∏–∫, —Ç–æ—Ä—Ü–±–∏–ª, —Å–ª–∏–∫–µ—Ä. –ü–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º: —Ä–µ–º–µ–Ω–Ω—É—é –ª–µ–Ω—Ç—É –¥–µ—à—ë–≤—É—é, –ø—Ä—è–∂–∫—É –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ–π–∫–∏ –∏ –ö–ú–¶ –∫–ª–µ–π. –î–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å\n\nüí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=get_shop_menu_keyboard(balance)
        )
    
    await state.set_state(TutorialStates.in_shop_menu)
    tutorial_db.update_tutorial_progress(data.get('player_id'), "in_shop_menu")
    await state.update_data(player_balance=balance)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–∞–≥–∞–∑–∏–Ω–µ
@tutorial_router.callback_query(F.data == "back_to_shop_menu")
async def back_to_shop_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        data = await state.get_data()
        player_id = data.get('player_id')
        
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 2000
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
        keyboard = get_shop_menu_keyboard(balance)
        
        await callback.message.edit_caption(
            caption=f"üè™ –ú–∞–≥–∞–∑–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
        
        await state.set_state(TutorialStates.in_shop_menu)
        await callback.answer()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_shop_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è) - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø
@tutorial_router.callback_query(F.data == "shop_exit")
async def shop_exit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    player_id = data.get('player_id')
    
    if not player_id:
        print("üîÑ player_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î...")
        active_player = db.get_active_player(callback.from_user.id)
        if active_player:
            player_id = active_player[0]
            await state.update_data(player_id=player_id)
            print(f"‚úÖ player_id –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î: {player_id}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å player_id –∏–∑ –ë–î")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    inventory = tutorial_db.get_tutorial_inventory(player_id)
    inventory_items = [item[0] for item in inventory]  # —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    
    print(f"üéí –ü–†–û–í–ï–†–ö–ê –ò–ù–í–ï–ù–¢–ê–†–Ø –ü–†–ò –í–´–•–û–î–ï: {inventory_items}")
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
    required_items = [
        "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂",
        "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", 
        "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1",
        "–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞",
        "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    missing_items = []
    for item in required_items:
        if item not in inventory_items:
            missing_items.append(item)
    
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã: {missing_items}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã - –Ω–µ –ø—É—Å–∫–∞–µ–º
    if missing_items:
        missing_text = "\n‚Ä¢ " + "\n‚Ä¢ ".join(missing_items)
        await callback.answer(
            f"‚ùå –¢—ã –µ—â–µ –Ω–µ –≤—Å–µ –∫—É–ø–∏–ª!\n\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:{missing_text}\n\n–í–µ—Ä–Ω–∏—Å—å –∏ –¥–æ–∫—É–ø–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã.",
            show_alert=True
        )
        return
    
    # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∫—É–ø–ª–µ–Ω—ã - –º–æ–∂–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await callback.message.edit_caption(
        caption="üè™ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ!",
        reply_markup=None
    )
    
    await callback.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ –ì–µ–Ω—É
    active_player = db.get_active_player(callback.from_user.id)
    player_name = active_player[2] if active_player else "–ò–≥—Ä–æ–∫"
    
    image_path = "images/tutorial/exit_shop.jpg"
    if not os.path.exists(image_path):
        image_path = "images/placeholder.jpg"
    
    try:
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ì–µ–Ω–æ–π.\n\n- –ù—É –≤—Ä–æ–¥–µ –≤—Å–µ —á—Ç–æ –Ω–∞–¥–æ –∫—É–ø–∏–ª, –≤–æ—Ç –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, —Ç–∞–º –ø–∞—Ä–µ–Ω—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ–Ω –¥–µ–ª–∞–µ—Ç —Ä–µ–º–µ–Ω—å. –ù–µ –æ—á–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ë–æ–≥ —Å –Ω–∏–º. –¢–µ–±–µ —Ö–≤–∞—Ç–∏—Ç, —á—Ç–æ–± –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å.\n\n–ü–æ–ø—Ä–æ—â–∞–≤—à–∏—Å—å –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–≤, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ–º–æ–π –∏ —Ä–µ—à–∏–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–∏–Ω—è—Ç—å—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É.",
            reply_markup=get_make_belt_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ì–µ–Ω–æ–π.\n\n- –ù—É –≤—Ä–æ–¥–µ –≤—Å–µ —á—Ç–æ –Ω–∞–¥–æ –∫—É–ø–∏–ª, –≤–æ—Ç –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, —Ç–∞–º –ø–∞—Ä–µ–Ω—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ–Ω –¥–µ–ª–∞–µ—Ç —Ä–µ–º–µ–Ω—å. –ù–µ –æ—á–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ë–æ–≥ —Å –Ω–∏–º. –¢–µ–±–µ —Ö–≤–∞—Ç–∏—Ç, —á—Ç–æ–± –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å.\n\n–ü–æ–ø—Ä–æ—â–∞–≤—à–∏—Å—å –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–≤, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ–º–æ–π –∏ —Ä–µ—à–∏–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–∏–Ω—è—Ç—å—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É.",
            reply_markup=get_make_belt_keyboard()
        )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞
@tutorial_router.callback_query(F.data.startswith("shop_"))
async def show_shop_category(callback: CallbackQuery, state: FSMContext):
    category_map = {
        "shop_knives": "–ù–æ–∂–∏",
        "shop_punches": "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", 
        "shop_edges": "–¢–æ—Ä—Ü–±–∏–ª—ã",
        "shop_materials": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "shop_hardware": "–§—É—Ä–Ω–∏—Ç—É—Ä–∞"
    }
    
    category = category_map.get(callback.data)
    if not category:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    
    print(f"üéØ –û–¢–õ–ê–î–ö–ê: –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–∞–ª–∞–Ω—Å
    data = await state.get_data()
    player_id = data.get('player_id')
    
    progress = tutorial_db.get_tutorial_progress(player_id)
    balance = progress[3] if progress else 2000
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_category_items = tutorial_db.get_shop_items_by_category(category)
    print(f"üì¶ –û–¢–õ–ê–î–ö–ê: –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {all_category_items}")
    
    # –°–û–ó–î–ê–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    builder = InlineKeyboardBuilder()
    for item in all_category_items:
        try:
            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:
            # item[0] = –Ω–∞–∑–≤–∞–Ω–∏–µ (string)
            # item[1] = —Ü–µ–Ω–∞ (int) 
            # item[2] = –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏ (0/1)
            item_name = item[0]
            item_price = item[1]
            is_available_in_tutorial = item[2]
            
            print(f"üõí –û–¢–õ–ê–î–ö–ê: –¢–æ–≤–∞—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ: '{item_name}', –¶–µ–Ω–∞: {item_price}, –î–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏: {is_available_in_tutorial}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏
            is_tutorial_item = item_name in AVAILABLE_TUTORIAL_ITEMS.get(category, [])
            
            can_afford = balance >= item_price
            item_text = f"{item_name} - {item_price} –º–æ–Ω–µ—Ç"
            
            if not can_afford:
                item_text += " ‚ùå"
            elif not is_tutorial_item:
                item_text += " üîí"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if not is_tutorial_item:
                # –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏
                callback_data = "not_in_tutorial"
            elif not can_afford:
                # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
                callback_data = "cant_afford"
            else:
                # –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å
                callback_data = f"buy_{item_name}"
            
            builder.button(
                text=item_text,
                callback_data=callback_data
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item}: {e}")
            continue
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop_menu")
    builder.adjust(1)
    keyboard = builder.as_markup()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_caption(
        caption=f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\n\n"
               f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
               f"üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã (üîí - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ–±—É—á–µ–Ω–∏–∏):\n"
               f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard
    )
    
    await state.set_state(TutorialStates.in_shop_category)
    await state.update_data(current_category=category, player_balance=balance)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@tutorial_router.callback_query(F.data.startswith("buy_"))
async def buy_item(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        player_id = data.get('player_id')
        current_category = data.get('current_category', '')
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê player_id –í –ù–ê–ß–ê–õ–ï: player_id = {player_id}")
        
        # –ï–°–õ–ò player_id –ù–ï–¢ –í –°–û–°–¢–û–Ø–ù–ò–ò - –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú
        if not player_id:
            print("üîÑ player_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î...")
            active_player = db.get_active_player(callback.from_user.id)
            if active_player:
                player_id = active_player[0]
                await state.update_data(player_id=player_id)
                print(f"‚úÖ player_id –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î: {player_id}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å player_id –∏–∑ –ë–î")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not player_id:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: player_id is None –∏–ª–∏ 0!")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        item_name = callback.data.replace("buy_", "")
        print(f"üõí –ü–û–ö–£–ü–ö–ê: –ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞: '{item_name}' –¥–ª—è player_id: {player_id}")
        
        # –î–ê–õ–ï–ï –ò–î–ï–¢ –°–¢–ê–†–´–ô –ö–û–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)...
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î
        progress = tutorial_db.get_tutorial_progress(player_id)
        balance = progress[3] if progress else 2000
            
        print(f"üí∞ –ü–û–ö–£–ü–ö–ê: –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {player_id}: {balance}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        all_category_items = tutorial_db.get_shop_items_by_category(current_category)
        item_info = None
        
        for item in all_category_items:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (item[0])
            if item[0] == item_name:  
                item_info = item
                break
        
        if not item_info:
            print(f"‚ùå –ü–û–ö–£–ü–ö–ê: –¢–æ–≤–∞—Ä '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        item_name = item_info[0]
        item_price = item_info[1]
        is_available_in_tutorial = item_info[2]
        
        print(f"‚úÖ –ü–û–ö–£–ü–ö–ê: –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: '{item_name}' –∑–∞ {item_price} –º–æ–Ω–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –≤ –æ–±—É—á–µ–Ω–∏–∏
        if item_name not in AVAILABLE_TUTORIAL_ITEMS.get(current_category, []):
            print(f"‚ùå –ü–û–ö–£–ü–ö–ê: –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏")
            await callback.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if balance < item_price:
            print(f"‚ùå –ü–û–ö–£–ü–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {item_price}, –µ—Å—Ç—å: {balance}")
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory = tutorial_db.get_tutorial_inventory(player_id)
        print(f"üéí –ü–û–ö–£–ü–ö–ê: –¢–µ–∫—É—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
        for inv_item in inventory:
            if len(inv_item) > 1 and inv_item[1] == item_name:  # inv_item[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                print(f"‚ùå –ü–û–ö–£–ü–ö–ê: –¢–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
                await callback.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        new_balance = balance - item_price
        print(f"üí∏ –ü–û–ö–£–ü–ö–ê: –°–ø–∏—Å–∞–Ω–∏–µ {item_price} –º–æ–Ω–µ—Ç. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ ID)
        success = tutorial_db.add_to_tutorial_inventory(player_id, item_name, current_category)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            tutorial_db.update_player_balance(player_id, new_balance)
            
            print(f"‚úÖ –ü–û–ö–£–ü–ö–ê: –£—Å–ø–µ—à–Ω–æ! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            await update_shop_category_message(callback, current_category, new_balance, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item_name}")
            
            await state.update_data(player_balance=new_balance)
            await callback.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item_name}")
        else:
            print(f"‚ùå –ü–û–ö–£–ü–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
            await callback.answer("‚ùå –≠—Ç–æ —è —É–∂–µ –∫—É–ø–∏–ª")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ buy_item: {str(e)}")
        import traceback
        traceback.print_exc()
        await callback.answer("‚ùå –Ø —É–∂–µ —ç—Ç–æ –∫—É–ø–∏–ª")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def update_shop_category_message(callback: CallbackQuery, category: str, balance: int, status_message: str = ""):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
    all_category_items = tutorial_db.get_shop_items_by_category(category)
    
    builder = InlineKeyboardBuilder()
    for item in all_category_items:
        item_name = item[0]
        item_price = item[1]
        is_available_in_tutorial = item[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏
        is_tutorial_item = item_name in AVAILABLE_TUTORIAL_ITEMS.get(category, [])
        
        can_afford = balance >= item_price
        item_text = f"{item_name} - {item_price} –º–æ–Ω–µ—Ç"
        
        if not can_afford:
            item_text += " ‚ùå"
        elif not is_tutorial_item:
            item_text += " üîí"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if not is_tutorial_item:
            callback_data = "not_in_tutorial"
        elif not can_afford:
            callback_data = "cant_afford"
        else:
            callback_data = f"buy_{item_name}"
        
        builder.button(
            text=item_text,
            callback_data=callback_data
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop_menu")
    builder.adjust(1)
    keyboard = builder.as_markup()
    
    caption = f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\n\n"
    if status_message:
        caption += f"{status_message}\n"
    caption += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    await callback.message.edit_caption(
        caption=caption,
        reply_markup=keyboard
    )

