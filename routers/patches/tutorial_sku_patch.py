"""
–ü–ê–¢–ß –î–õ–Ø TUTORIAL.PY - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª routers/tutorial.py
"""

# === –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ê–†–¢–ò–ö–£–õ–û–í ===

# –ê—Ä—Ç–∏–∫—É–ª—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
REQUIRED_TUTORIAL_SKUS = [
    "KNIFE_KAN",      # –ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂
    "PUNCH_VYS",      # –í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏  
    "EDGE_MUL",       # –ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1
    "MAT_DES",        # –î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞
    "HW_DES",         # –î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π
    "THREAD_SHV"      # –®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏ (–Ω–æ–≤–∞—è)
]

# –ú–∞–ø–ø–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
SKU_TO_NAME = {
    "KNIFE_KAN": "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂",
    "PUNCH_VYS": "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏",
    "EDGE_MUL": "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1", 
    "MAT_DES": "–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞",
    "HW_DES": "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π",
    "THREAD_SHV": "–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏"
}

# === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def check_tutorial_inventory_complete(player_id: int) -> tuple[bool, list]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫—É–ø–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bool, list) - (–ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç, —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö SKU)
    """
    try:
        from database.models import Database
        db = Database()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–±–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        tutorial_inventory = db.tutorial.get_tutorial_inventory(player_id)
        purchased_skus = [item[0] for item in tutorial_inventory]  # item_sku —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        
        missing_skus = []
        for required_sku in REQUIRED_TUTORIAL_SKUS:
            if required_sku not in purchased_skus:
                missing_skus.append(required_sku)
        
        is_complete = len(missing_skus) == 0
        return is_complete, missing_skus
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
        return False, REQUIRED_TUTORIAL_SKUS.copy()


async def get_missing_items_names(missing_skus: list) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    missing_names = []
    for sku in missing_skus:
        if sku in SKU_TO_NAME:
            missing_names.append(SKU_TO_NAME[sku])
        else:
            missing_names.append(sku)  # fallback
    
    return ", ".join(missing_names) if missing_names else "–≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ"


# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –í –§–£–ù–ö–¶–ò–ò buy_item() ===

# –ó–ê–ú–ï–ù–ò–¢–ï —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é buy_item() –Ω–∞ —ç—Ç—É:

async def buy_item(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ callback data
        item_sku = callback.data.replace("buy_", "")
        print(f"üõí –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {item_sku}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º player_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        data = await state.get_data()
        player_id = data.get('player_id')
        
        if not player_id:
            from database.models import Database
            db = Database()
            user = callback.from_user
            player_data = db.characters.get_active_player(user.id)
            if player_data:
                player_id = player_data[0]
                await state.update_data(player_id=player_id)
                print(f"üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω player_id: {player_id}")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        
        from database.models import Database
        db = Database()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        item_data = db.shop.get_item_by_sku(item_sku)
        if not item_data:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        item_name = item_data[1]  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        item_price = item_data[2]  # –¶–µ–Ω–∞
        available_in_tutorial = item_data[3]  # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏
        if not available_in_tutorial:
            await callback.answer("üîí –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        player_balance = db.tutorial.get_player_balance(player_id)
        if player_balance < item_price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if db.tutorial.has_item_in_tutorial(player_id, item_sku):
            await callback.answer("‚úÖ –Ø —É–∂–µ —ç—Ç–æ –∫—É–ø–∏–ª", show_alert=True)
            return
        
        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        new_balance = player_balance - item_price
        db.tutorial.update_player_balance(player_id, new_balance)
        db.tutorial.add_to_tutorial_inventory(player_id, item_sku, item_name)
        
        print(f"‚úÖ –ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä: {item_name} (SKU: {item_sku}) –∑–∞ {item_price} –º–æ–Ω–µ—Ç")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        await update_shop_category_message(callback, item_sku, new_balance)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ buy_item: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏", show_alert=True)


async def update_shop_category_message(callback: CallbackQuery, purchased_sku: str, new_balance: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"""
    try:
        data = await callback.message.edit_reply_markup()
        category = data.get('category', '–ù–æ–∂–∏')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        from database.models import Database
        db = Database()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        items = db.shop.get_items_by_category(category)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        player_id = (await callback.get_state().get_data()).get('player_id')
        tutorial_inventory = db.tutorial.get_tutorial_inventory(player_id)
        purchased_skus = [item[0] for item in tutorial_inventory]
        
        for sku, name, price, available, image_path, durability in items:
            if sku in purchased_skus:
                builder.button(text=f"‚úÖ {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"already_bought_{sku}")
            elif not available:
                builder.button(text=f"üîí {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"locked_{sku}")
            elif new_balance < price:
                builder.button(text=f"‚ùå {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"no_money_{sku}")
            else:
                builder.button(text=f"üõí {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"buy_{sku}")
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop_menu")
        builder.adjust(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\nüí∞ –ë–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {e}")