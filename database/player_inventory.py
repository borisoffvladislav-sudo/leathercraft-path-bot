"""
–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
–° —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
"""

import sqlite3
from typing import List, Tuple, Optional, Dict, Any
from .models import BaseDatabase


class PlayerInventoryDB(BaseDatabase):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –∏–≥—Ä–æ–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    """
    
    def __init__(self, db_path: str = "game.db"):
        super().__init__(db_path)
        self._ensure_inventory_tables()
    
    def _ensure_inventory_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        query = '''
            CREATE TABLE IF NOT EXISTS player_inventory (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                player_id INTEGER NOT NULL,
                item_sku TEXT NOT NULL,  -- –ê–†–¢–ò–ö–£–õ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è
                item_name TEXT NOT NULL,  -- –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                item_type TEXT NOT NULL,
                quantity INTEGER DEFAULT 1,
                durability INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (player_id) REFERENCES players (id),
                UNIQUE(player_id, item_sku)  -- –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            )
        '''
        self.execute_query(query)
        print("üéØ –¢–∞–±–ª–∏—Ü–∞ player_inventory —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ (—Å —Å–∏—Å—Ç–µ–º–æ–π SKU)")
    
    def add_to_inventory(self, player_id: int, item_sku: str, item_name: str = None, item_type: str = None, durability: Optional[int] = None) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        """
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª
            if not item_sku and item_name:
                from .shop_catalog import ShopCatalogDB
                shop_db = ShopCatalogDB(self.db_path)
                item_sku = shop_db.get_sku_by_name(item_name)
                if not item_sku:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {item_name}")
                    return False
            
            # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            if not item_name or not item_type:
                from .shop_catalog import ShopCatalogDB
                shop_db = ShopCatalogDB(self.db_path)
                item_data = shop_db.get_item_by_sku(item_sku)
                if not item_data:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {item_sku}")
                    return False
                
                if not item_name:
                    item_name = item_data[1]  # name –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
                if not item_type:
                    item_type = item_data[2]  # category –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            
            # –ï—Å–ª–∏ –ø—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            if durability is None:
                from .shop_catalog import ShopCatalogDB
                shop_db = ShopCatalogDB(self.db_path)
                item_data = shop_db.get_item_by_sku(item_sku)
                if item_data:
                    durability = item_data[5]  # durability –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
                else:
                    durability = 1
            
            self.execute_query('''
                INSERT INTO player_inventory (player_id, item_sku, item_name, item_type, quantity, durability)
                VALUES (?, ?, ?, ?, 1, ?)
            ''', (player_id, item_sku, item_name, item_type, durability))
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç '{item_name}' (SKU: {item_sku}) –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ {player_id}")
            return True
            
        except sqlite3.IntegrityError:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{item_sku}' —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏–≥—Ä–æ–∫–∞ {player_id}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {e}")
            return False
    
    def add_to_inventory_by_name(self, player_id: int, item_name: str, item_type: str = None, durability: Optional[int] = None) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        from .shop_catalog import ShopCatalogDB
        shop_db = ShopCatalogDB(self.db_path)
        sku = shop_db.get_sku_by_name(item_name)
        
        if not sku:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {item_name}")
            return False
        
        return self.add_to_inventory(player_id, sku, item_name, item_type, durability)
    
    def get_player_inventory(self, player_id: int, item_type: Optional[str] = None) -> List[Tuple]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        """
        if item_type:
            return self.fetch_all(
                "SELECT item_sku, item_name, item_type, quantity, durability FROM player_inventory WHERE player_id = ? AND item_type = ? ORDER BY item_type, item_name",
                (player_id, item_type)
            )
        else:
            return self.fetch_all(
                "SELECT item_sku, item_name, item_type, quantity, durability FROM player_inventory WHERE player_id = ? ORDER BY item_type, item_name",
                (player_id,)
            )
    
    def has_item(self, player_id: int, item_sku: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        result = self.fetch_one(
            "SELECT 1 FROM player_inventory WHERE player_id = ? AND item_sku = ?",
            (player_id, item_sku)
        )
        return result is not None
    
    def has_item_by_name(self, player_id: int, item_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        result = self.fetch_one(
            "SELECT 1 FROM player_inventory WHERE player_id = ? AND item_name = ?",
            (player_id, item_name)
        )
        return result is not None
    
    def get_item_durability(self, player_id: int, item_sku: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        result = self.fetch_one(
            "SELECT durability FROM player_inventory WHERE player_id = ? AND item_sku = ?",
            (player_id, item_sku)
        )
        return result[0] if result else None
    
    def update_durability(self, player_id: int, item_sku: str, new_durability: int) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        """
        try:
            if new_durability <= 0:
                self.execute_query(
                    "DELETE FROM player_inventory WHERE player_id = ? AND item_sku = ?",
                    (player_id, item_sku)
                )
                print(f"üóëÔ∏è –ü—Ä–µ–¥–º–µ—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{item_sku}' —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–ø—Ä–æ—á–Ω–æ—Å—Ç—å 0)")
                return True
            else:
                self.execute_query(
                    "UPDATE player_inventory SET durability = ? WHERE player_id = ? AND item_sku = ?",
                    (new_durability, player_id, item_sku)
                )
                print(f"üîß –ü—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ '{item_sku}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_durability}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏...