"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å
"""

import sqlite3
from typing import List, Tuple, Optional, Dict, Any
from .models import BaseDatabase


class CharactersDB(BaseDatabase):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
    –°–æ–∑–¥–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —É—Ä–æ–≤–Ω–∏, –∫–ª–∞—Å—Å—ã
    """
    
    def __init__(self, db_path: str = "game.db"):
        super().__init__(db_path)
        self._ensure_character_tables()
    
    def _ensure_character_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
        users_query = '''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        '''
        self.execute_query(users_query)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        players_query = '''
            CREATE TABLE IF NOT EXISTS players (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                class TEXT NOT NULL,
                mastery INTEGER DEFAULT 0,
                luck INTEGER DEFAULT 0,
                marketing INTEGER DEFAULT 0,
                reputation INTEGER DEFAULT 0,
                coins INTEGER DEFAULT 1500,
                level INTEGER DEFAULT 1,
                experience INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                UNIQUE(user_id, name)
            )
        '''
        self.execute_query(players_query)
        print("üéØ –¢–∞–±–ª–∏—Ü—ã users –∏ players —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    def get_or_create_user(self, telegram_id: int, username: str = None, first_name: str = None, last_name: str = None) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.fetch_one(
            "SELECT id FROM users WHERE telegram_id = ?",
            (telegram_id,)
        )
        
        if user:
            return user[0]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            cursor = self.execute_query(
                "INSERT INTO users (telegram_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
                (telegram_id, username, first_name, last_name)
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
            return cursor.lastrowid
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return 0
    
    def add_player(self, user_id: int, name: str, player_class: str) -> int:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç player_id –∏–ª–∏ 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.execute_query(
            "UPDATE players SET is_active = FALSE WHERE user_id = ?",
            (user_id,)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å—É
        stats = self._get_starting_stats(player_class)
        
        try:
            cursor = self.execute_query('''
                INSERT INTO players (user_id, name, class, mastery, luck, marketing, reputation, coins, level, is_active)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, TRUE)
            ''', (user_id, name, player_class, stats['mastery'], stats['luck'], stats['marketing'], stats['reputation'], stats['coins']))
            
            player_id = cursor.lastrowid
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ '{name}' (–∫–ª–∞—Å—Å: {player_class}) —Å ID {player_id}")
            return player_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return 0
    
    def _get_starting_stats(self, player_class: str) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å—É"""
        stats = {
            "–†–∞–±–æ—Ç—è–≥–∞": {"mastery": 25, "luck": 15, "marketing": 5, "reputation": 5, "coins": 1500},
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": {"mastery": 10, "luck": 15, "marketing": 25, "reputation": 10, "coins": 1500},
            "–ë–ª–æ–≥–≥–µ—Ä": {"mastery": 5, "luck": 25, "marketing": 20, "reputation": 20, "coins": 1500}
        }
        return stats.get(player_class, stats["–†–∞–±–æ—Ç—è–≥–∞"])
    
    def get_active_player(self, telegram_id: int) -> Optional[Tuple]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        """
        query = '''
            SELECT p.id, p.name, p.class, p.mastery, p.luck, p.marketing, p.reputation, 
                   p.coins, p.level, p.experience, p.user_id
            FROM players p
            JOIN users u ON p.user_id = u.id
            WHERE u.telegram_id = ? AND p.is_active = TRUE
        '''
        return self.fetch_one(query, (telegram_id,))
    
    def get_player_by_id(self, player_id: int) -> Optional[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID"""
        return self.fetch_one(
            "SELECT id, name, class, mastery, luck, marketing, reputation, coins, level, experience, user_id FROM players WHERE id = ?",
            (player_id,)
        )
    
    def update_player_stats(self, player_id: int, stats: Dict[str, int]) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            query = "UPDATE players SET "
            params = []
            
            for stat, value in stats.items():
                if stat in ['mastery', 'luck', 'marketing', 'reputation', 'coins', 'level', 'experience']:
                    query += f"{stat} = ?, "
                    params.append(value)
            
            query = query.rstrip(", ") + " WHERE id = ?"
            params.append(player_id)
            
            self.execute_query(query, tuple(params))
            print(f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {player_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            return False
    
    def add_experience(self, player_id: int, exp: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç
            player = self.get_player_by_id(player_id)
            if not player:
                return False
            
            current_exp = player[9]  # experience
            new_exp = current_exp + exp
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            current_level = player[8]  # level
            new_level = self._calculate_level(new_exp)
            
            if new_level > current_level:
                # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
                self.execute_query(
                    "UPDATE players SET experience = ?, level = ? WHERE id = ?",
                    (new_exp, new_level, player_id)
                )
                print(f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ {player_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ {new_level}!")
                return True
            else:
                # –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
                self.execute_query(
                    "UPDATE players SET experience = ? WHERE id = ?",
                    (new_exp, player_id)
                )
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
            return False
    
    def _calculate_level(self, experience: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç 100 –æ–ø—ã—Ç–∞
        return max(1, experience // 100)
    
    def update_coins(self, player_id: int, coins_change: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            player = self.get_player_by_id(player_id)
            if not player:
                return False
            
            current_coins = player[7]  # coins
            new_coins = max(0, current_coins + coins_change)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            
            self.execute_query(
                "UPDATE players SET coins = ? WHERE id = ?",
                (new_coins, player_id)
            )
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {player_id}: {current_coins} -> {new_coins} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {coins_change})")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False
    
    def get_player_characteristics(self, player_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        player = self.get_player_by_id(player_id)
        if not player:
            return {}
        
        return {
            "id": player[0],
            "name": player[1],
            "class": player[2],
            "mastery": player[3],
            "luck": player[4],
            "marketing": player[5],
            "reputation": player[6],
            "coins": player[7],
            "level": player[8],
            "experience": player[9],
            "user_id": player[10]
        }
    
    def get_all_player_characters(self, telegram_id: int) -> List[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = '''
            SELECT p.id, p.name, p.class, p.level, p.is_active
            FROM players p
            JOIN users u ON p.user_id = u.id
            WHERE u.telegram_id = ?
            ORDER BY p.is_active DESC, p.created_at DESC
        '''
        return self.fetch_all(query, (telegram_id,))
    
    def switch_active_character(self, telegram_id: int, character_id: int) -> bool:
        """–°–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º user_id
            user = self.fetch_one("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
            if not user:
                return False
            
            user_id = user[0]
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.execute_query(
                "UPDATE players SET is_active = FALSE WHERE user_id = ?",
                (user_id,)
            )
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            self.execute_query(
                "UPDATE players SET is_active = TRUE WHERE id = ? AND user_id = ?",
                (character_id, user_id)
            )
            
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {character_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False