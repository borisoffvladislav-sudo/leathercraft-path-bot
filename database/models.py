"""
–ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Database –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import sqlite3
import os
from typing import Optional, List, Tuple

class BaseDatabase:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–∞–º–∏
    """
    
    def __init__(self, db_path: str = "game.db"):
        self.db_path = db_path
        self._ensure_database_dir()
    
    def _ensure_database_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
         # –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞–ø–∫–∏ - —Å–æ–∑–¥–∞–µ–º –∏—Ö
        if os.path.dirname(self.db_path) and not os.path.exists(os.path.dirname(self.db_path)):
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
    
    def _get_connection(self) -> sqlite3.Connection:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ë–î
        """
        return sqlite3.connect(self.db_path, check_same_thread=False)
    
    def execute_query(self, query: str, params: tuple = ()) -> sqlite3.Cursor:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        conn = self._get_connection()
        try:
            cursor = conn.execute(query, params)
            conn.commit()
            return cursor
        except Exception as e:
            conn.rollback()
            raise e
        finally:
            conn.close()
    
    def fetch_one(self, query: str, params: tuple = ()) -> Optional[tuple]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
        conn = self._get_connection()
        try:
            cursor = conn.execute(query, params)
            return cursor.fetchone()
        finally:
            conn.close()
    
    def fetch_all(self, query: str, params: tuple = ()) -> List[tuple]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏"""
        conn = self._get_connection()
        try:
            cursor = conn.execute(query, params)
            return cursor.fetchall()
        finally:
            conn.close()


class Database:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏ –ë–î
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    """
    
    def __init__(self, db_path: str = "game.db"):
        self.db_path = db_path
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ë–î
        from .shop_catalog import ShopCatalogDB
        from .player_inventory import PlayerInventoryDB
        from .characters import CharactersDB
        from .tutorial_progress import TutorialProgressDB
        from .orders import OrdersDB
        
        self.shop = ShopCatalogDB(db_path)
        self.inventory = PlayerInventoryDB(db_path)
        self.characters = CharactersDB(db_path)
        self.tutorial = TutorialProgressDB(db_path)
        self.orders = OrdersDB(db_path)
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===
    
    # –ú–∞–≥–∞–∑–∏–Ω
    def get_tools_by_category(self, category: str) -> List[tuple]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return self.shop.get_items_by_category(category)
    
    def get_shop_items_by_category(self, category: str) -> List[tuple]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å TutorialDatabase"""
        return self.shop.get_items_by_category(category)
    
    # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    def add_to_inventory(self, player_id: int, item_name: str, item_type: str) -> bool:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return self.inventory.add_to_inventory(player_id, item_name, item_type)
    
    def get_player_inventory(self, player_id: int, item_type: str = None) -> List[tuple]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return self.inventory.get_player_inventory(player_id, item_type)
    
    # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
    def get_active_player(self, telegram_id: int) -> Optional[tuple]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return self.characters.get_active_player(telegram_id)
    
    def add_player(self, user_id: int, name: str, player_class: str) -> int:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return self.characters.add_player(user_id, name, player_class)
    
    # –û–±—É—á–µ–Ω–∏–µ
    def init_tutorial_progress(self, player_id: int) -> bool:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å TutorialDatabase"""
        return self.tutorial.init_tutorial_progress(player_id)
    
    def update_player_balance(self, player_id: int, new_balance: int) -> bool:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å TutorialDatabase"""
        return self.tutorial.update_player_balance(player_id, new_balance)
    
    def add_to_tutorial_inventory(self, player_id: int, item_name: str, item_type: str) -> bool:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å TutorialDatabase"""
        return self.tutorial.add_to_tutorial_inventory(player_id, item_name, item_type)


def check_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    db = Database()
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print(f"üìä –ü—É—Ç—å –∫ –ë–î: {db.db_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
    test_methods = [
        db.shop.get_items_by_category,
        db.inventory.get_player_inventory, 
        db.characters.get_active_player,
        db.tutorial.init_tutorial_progress
    ]
    
    for method in test_methods:
        print(f"‚úÖ {method.__name__} –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")