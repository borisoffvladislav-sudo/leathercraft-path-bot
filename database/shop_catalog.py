"""
–ö–∞—Ç–∞–ª–æ–≥ –º–∞–≥–∞–∑–∏–Ω–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, —Ü–µ–Ω–∞–º–∏
–° —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (SKU) –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import sqlite3
from typing import List, Tuple, Optional, Dict, Any
from .models import BaseDatabase


class ShopCatalogDB(BaseDatabase):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –º–∞–≥–∞–∑–∏–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    """
    
    def __init__(self, db_path: str = "game.db"):
        super().__init__(db_path)
        self._ensure_shop_tables()
        self.init_shop_items()
    
    def _ensure_shop_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        query = '''
            CREATE TABLE IF NOT EXISTS shop_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sku TEXT NOT NULL UNIQUE,  -- –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ê–†–¢–ò–ö–£–õ
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                price INTEGER NOT NULL,
                available_in_tutorial BOOLEAN DEFAULT FALSE,
                image_path TEXT,
                durability INTEGER DEFAULT 10,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        '''
        self.execute_query(query)
        print("üéØ –¢–∞–±–ª–∏—Ü–∞ shop_items —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ (—Å —Å–∏—Å—Ç–µ–º–æ–π SKU)")
    
    def _generate_sku(self, category: str, name: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        –§–æ—Ä–º–∞—Ç: –ö–ê–¢_–°–û–ö–†–ê–©–ï–ù–ò–ï_–¶–ò–§–†–´
        """
        # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_map = {
            "–ù–æ–∂–∏": "KNIFE",
            "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏": "PUNCH", 
            "–¢–æ—Ä—Ü–±–∏–ª—ã": "EDGE",
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": "MAT",
            "–§—É—Ä–Ω–∏—Ç—É—Ä–∞": "HW",
            "–•–∏–º–∏—è": "CHEM",
            "–ù–∏—Ç–∫–∏": "THREAD"
        }
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 3-4 –±—É–∫–≤—ã)
        name_short = ''.join([word[:3].upper() for word in name.split()[:2]])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU
        base_sku = f"{category_map.get(category, 'ITEM')}_{name_short}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        counter = 1
        sku = base_sku
        while self._sku_exists(sku):
            sku = f"{base_sku}_{counter}"
            counter += 1
            
        return sku
    
    def _sku_exists(self, sku: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ä—Ç–∏–∫—É–ª"""
        result = self.fetch_one("SELECT 1 FROM shop_items WHERE sku = ?", (sku,))
        return result is not None
    
    def init_shop_items(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä—ã
        existing_items = self.fetch_all("SELECT COUNT(*) FROM shop_items")
        if existing_items[0][0] > 0:
            print("‚úÖ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return
        
        items = [
            # –ù–æ–∂–∏
            ("–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂", "–ù–æ–∂–∏", 300, True, "images/shop/knife_cheap.jpg", 5, "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"),
            ("–ù–æ–∂ SDI", "–ù–æ–∂–∏", 900, False, "images/shop/knife_mid.jpg", 15, "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–∂ –¥–ª—è –ø—Ä–æ—Ñ–∏"),
            ("–®–æ—Ä–Ω—ã–π –Ω–æ–∂", "–ù–æ–∂–∏", 3600, False, "images/shop/knife_pro.jpg", 30, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–æ—Ä–Ω—ã–π –Ω–æ–∂"),
            
            # –ü—Ä–æ–±–æ–π–Ω–∏–∫–∏
            ("–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", 280, True, "images/shop/punch_set.jpg", 8, "–ù–∞–±–æ—Ä –ø—Ä–æ–±–æ–π–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞"),
            ("–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏ Wuta", "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", 840, False, "images/shop/punch_wuta.jpg", 20, "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏ Wuta"),
            ("–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏ Sinabroks", "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", 3360, False, "images/shop/punch_storybrook.jpg", 50, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏"),
            
            # –¢–æ—Ä—Ü–±–∏–ª—ã
            ("–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1", "–¢–æ—Ä—Ü–±–∏–ª—ã", 250, True, "images/shop/edge_slicker.jpg", 10, "–ú—É–ª—å—Ç–∏—Ç—É–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–æ–º–∫–∏"),
            ("–¢–æ—Ä—Ü–±–∏–ª Wuta", "–¢–æ—Ä—Ü–±–∏–ª—ã", 750, False, "images/shop/edge_wuta.jpg", 25, "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ—Ä—Ü–±–∏–ª"),
            ("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä—Ü–±–∏–ª", "–¢–æ—Ä—Ü–±–∏–ª—ã", 3000, False, "images/shop/edge_pro.jpg", 50, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
            ("–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", 150, True, "images/shop/leather_cheap.jpg", 1, "–ù–µ–¥–æ—Ä–æ–≥–∞—è –∫–æ–∂–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"),
            ("–û–±—ã—á–Ω–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", 450, False, "images/shop/leather_mid.jpg", 1, "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–∂–∞"),
            ("–î–æ—Ä–æ–≥–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", 1800, False, "images/shop/leather_expensive.jpg", 1, "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–æ–∂–∞"),
            
            # –§—É—Ä–Ω–∏—Ç—É—Ä–∞
            ("–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π", "–§—É—Ä–Ω–∏—Ç—É—Ä–∞", 100, True, "images/shop/hardware_belts.jpg", 1, "–ü—Ä–æ—Å—Ç–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞"),
            ("–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π", "–§—É—Ä–Ω–∏—Ç—É—Ä–∞", 300, False, "images/shop/hardware_wallets.jpg", 1, "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞"),
            ("–õ–∞—Ç—É–Ω–Ω–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞", "–§—É—Ä–Ω–∏—Ç—É—Ä–∞", 1200, False, "images/shop/hardware_bags.jpg", 1, "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –ª–∞—Ç—É–Ω—å"),
            
            # –•–∏–º–∏—è
            ("–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫", "–•–∏–º–∏—è", 80, True, "images/shop/wax.jpg", 1, "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ø—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫"),
            ("–ú–∞—Å–ª–æ–≤–æ—Å–∫–æ–≤—ã–µ —Å–º–µ—Å–∏", "–•–∏–º–∏—è", 240, False, "images/shop/wax_mix.jpg", 1, "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–º–µ—Å–∏"),
            ("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞", "–•–∏–º–∏—è", 960, False, "images/shop/pro_cosmetics.jpg", 1, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"),
            
            # –ù–∏—Ç–∫–∏
            ("–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏", "–ù–∏—Ç–∫–∏", 150, True, "images/shop/threads_cheap.jpg", 1, "–ü—Ä–æ—á–Ω—ã–µ —Ö–ª–æ–ø–∫–æ–≤—ã–µ –Ω–∏—Ç–∫–∏"),
            ("–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∏—Ç–∫–∏", "–ù–∏—Ç–∫–∏", 450, False, "images/shop/threads_mid.jpg", 1, "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∏—Ç–∫–∏"),
            ("–õ—å–Ω—è–Ω—ã–µ –Ω–∏—Ç–∫–∏", "–ù–∏—Ç–∫–∏", 1800, False, "images/shop/threads_pro.jpg", 1, "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –ª—å–Ω—è–Ω—ã–µ –Ω–∏—Ç–∫–∏"),
        ]
        
        try:
            for item in items:
                name, category, price, available, image_path, durability, description = item
                sku = self._generate_sku(category, name)
                
                self.execute_query('''
                    INSERT INTO shop_items (sku, name, category, price, available_in_tutorial, image_path, durability, description)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (sku, name, category, price, available, image_path, durability, description))
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} (SKU: {sku})")
            
            print(f"üéØ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏")
        except sqlite3.IntegrityError:
            print("‚úÖ –¢–æ–≤–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î")
    
    def get_items_by_category(self, category: str) -> List[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.fetch_all(
            "SELECT sku, name, price, available_in_tutorial, image_path, durability FROM shop_items WHERE category = ? ORDER BY price",
            (category,)
        )
    
    def get_item_by_sku(self, sku: str) -> Optional[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        return self.fetch_one(
            "SELECT sku, name, price, available_in_tutorial, image_path, durability, description FROM shop_items WHERE sku = ?",
            (sku,)
        )
    
    def get_item_by_name(self, item_name: str) -> Optional[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.fetch_one(
            "SELECT sku, name, price, available_in_tutorial, image_path, durability, description FROM shop_items WHERE name = ?",
            (item_name,)
        )
    
    def get_sku_by_name(self, item_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞"""
        result = self.fetch_one("SELECT sku FROM shop_items WHERE name = ?", (item_name,))
        return result[0] if result else None
    
    def get_name_by_sku(self, sku: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        result = self.fetch_one("SELECT name FROM shop_items WHERE sku = ?", (sku,))
        return result[0] if result else None
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def get_all_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        result = self.fetch_all("SELECT DISTINCT category FROM shop_items ORDER BY category")
        return [row[0] for row in result]
    
    def get_tutorial_items(self) -> List[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–±—É—á–µ–Ω–∏–∏"""
        return self.fetch_all(
            "SELECT sku, name, category, price, image_path FROM shop_items WHERE available_in_tutorial = TRUE ORDER BY category, price"
        )
    
    def get_tutorial_items_skus(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –æ–±—É—á–µ–Ω–∏–∏"""
        result = self.fetch_all(
            "SELECT sku FROM shop_items WHERE available_in_tutorial = TRUE"
        )
        return [row[0] for row in result]