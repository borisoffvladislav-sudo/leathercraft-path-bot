"""
–°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º, –Ω–∞–≥—Ä–∞–¥–∞–º–∏
(–ë—É–¥—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∞—Ñ—Ç–∞)
"""

import sqlite3
import json
from typing import List, Tuple, Optional, Dict, Any
from datetime import datetime
from .models import BaseDatabase


class OrdersDB(BaseDatabase):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–∫–∞–∑–æ–≤
    –ó–∞–∫–∞–∑—ã, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–∞–≥—Ä–∞–¥—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self, db_path: str = "game.db"):
        super().__init__(db_path)
        self._ensure_orders_tables()
        self.init_default_orders()
    
    def _ensure_orders_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        orders_query = '''
            CREATE TABLE IF NOT EXISTS order_templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT NOT NULL,
                required_level INTEGER DEFAULT 1,
                difficulty INTEGER DEFAULT 1,
                base_reward INTEGER DEFAULT 100,
                required_items TEXT,  -- JSON —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                required_tools TEXT,  -- JSON —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                time_limit INTEGER DEFAULT 24,  -- –í —á–∞—Å–∞—Ö
                category TEXT DEFAULT '—Ä–µ–º–Ω–∏',
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        '''
        self.execute_query(orders_query)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
        player_orders_query = '''
            CREATE TABLE IF NOT EXISTS player_orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                player_id INTEGER NOT NULL,
                template_id INTEGER NOT NULL,
                status TEXT DEFAULT 'active',  -- active, completed, failed, cancelled
                quality INTEGER DEFAULT 0,     -- –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
                reward INTEGER DEFAULT 0,      -- –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP NULL,
                deadline TIMESTAMP NULL,
                used_items TEXT,               -- JSON —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                used_tools TEXT,               -- JSON —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                client_satisfaction INTEGER DEFAULT 0,
                FOREIGN KEY (player_id) REFERENCES players (id),
                FOREIGN KEY (template_id) REFERENCES order_templates (id)
            )
        '''
        self.execute_query(player_orders_query)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        clients_query = '''
            CREATE TABLE IF NOT EXISTS clients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                preferences TEXT,  -- JSON —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
                base_reputation INTEGER DEFAULT 0,
                favorite_category TEXT DEFAULT '—Ä–µ–º–Ω–∏',
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        '''
        self.execute_query(clients_query)
        
        print("üéØ –¢–∞–±–ª–∏—Ü—ã —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    def init_default_orders(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑—ã
        existing_orders = self.fetch_all("SELECT COUNT(*) FROM order_templates")
        if existing_orders[0][0] > 0:
            print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return
        
        default_orders = [
            {
                "name": "–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–º–µ–Ω—å",
                "description": "–ö–ª–∏–µ–Ω—Ç—É –Ω—É–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ–π –∫–æ–∂–∞–Ω—ã–π —Ä–µ–º–µ–Ω—å –Ω–∞ –ø—Ä—è–∂–∫–µ",
                "required_level": 1,
                "difficulty": 1,
                "base_reward": 200,
                "required_items": '{"–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞": 1, "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π": 1}',
                "required_tools": '{"–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂": 1, "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1": 1}',
                "time_limit": 24,
                "category": "—Ä–µ–º–Ω–∏"
            },
            {
                "name": "–†–µ–º–µ–Ω—å —Å —Ç–∏—Å–Ω–µ–Ω–∏–µ–º", 
                "description": "–†–µ–º–µ–Ω—å —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–∏—Å–Ω–µ–Ω–∏–µ–º –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è",
                "required_level": 2,
                "difficulty": 2,
                "base_reward": 400,
                "required_items": '{"–û–±—ã—á–Ω–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞": 1, "–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π": 1, "–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫": 1}',
                "required_tools": '{"–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂": 1, "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1": 1, "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏": 1}',
                "time_limit": 48,
                "category": "—Ä–µ–º–Ω–∏"
            },
            {
                "name": "–ü—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç—Ö–æ–ª–¥–µ—Ä",
                "description": "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ—Ä–∂–∞—Ç–µ–ª—å –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç",
                "required_level": 1, 
                "difficulty": 1,
                "base_reward": 150,
                "required_items": '{"–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞": 1, "–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏": 1}',
                "required_tools": '{"–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂": 1, "–°—Ä–æ—á–Ω—ã–π –ø—Ä–æ–±–æ–π–Ω–∏–∫ PFG": 1}',
                "time_limit": 24,
                "category": "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"
            },
            {
                "name": "–ö–æ—à–µ–ª–µ–∫ —Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º–∏",
                "description": "–ö–æ—à–µ–ª–µ–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞—Ä—Ç –∏ –¥–µ–Ω–µ–≥",
                "required_level": 3,
                "difficulty": 3,
                "base_reward": 600,
                "required_items": '{"–î–æ—Ä–æ–≥–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞": 1, "–õ—å–Ω—è–Ω—ã–µ –Ω–∏—Ç–∫–∏": 1, "–ü—á–µ–ª–∏–Ω—ã–π –≤–æ—Å–∫": 1}',
                "required_tools": '{"–ù–æ–∂ SDI": 1, "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏ Wuta": 1, "–¢–æ—Ä—Ü–±–∏–ª Wuta": 1}',
                "time_limit": 72,
                "category": "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"
            }
        ]
        
        try:
            for order in default_orders:
                self.execute_query('''
                    INSERT INTO order_templates (name, description, required_level, difficulty, base_reward, 
                                               required_items, required_tools, time_limit, category)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    order["name"], order["description"], order["required_level"], 
                    order["difficulty"], order["base_reward"], order["required_items"],
                    order["required_tools"], order["time_limit"], order["category"]
                ))
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(default_orders)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    def get_available_orders(self, player_level: int) -> List[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é"""
        return self.fetch_all('''
            SELECT id, name, description, required_level, difficulty, base_reward, 
                   required_items, required_tools, time_limit, category
            FROM order_templates 
            WHERE required_level <= ? AND is_active = TRUE
            ORDER BY required_level, difficulty
        ''', (player_level,))
    
    def create_player_order(self, player_id: int, template_id: int) -> int:
        """–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞–∫–∞–∑–∞
            template = self.fetch_one(
                "SELECT time_limit, base_reward FROM order_templates WHERE id = ?",
                (template_id,)
            )
            
            if not template:
                return 0
            
            time_limit_hours = template[0]
            deadline = datetime.now().timestamp() + (time_limit_hours * 3600)
            
            cursor = self.execute_query('''
                INSERT INTO player_orders (player_id, template_id, deadline, reward)
                VALUES (?, ?, datetime(?, 'unixepoch'), ?)
            ''', (player_id, template_id, deadline, template[1]))
            
            order_id = cursor.lastrowid
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order_id} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}")
            return order_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return 0
    
    def get_player_active_orders(self, player_id: int) -> List[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–≥—Ä–æ–∫–∞"""
        return self.fetch_all('''
            SELECT po.id, ot.name, ot.description, po.started_at, po.deadline, 
                   po.status, po.quality, po.reward
            FROM player_orders po
            JOIN order_templates ot ON po.template_id = ot.id
            WHERE po.player_id = ? AND po.status = 'active'
            ORDER BY po.deadline
        ''', (player_id,))
    
    def get_order_details(self, order_id: int) -> Optional[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
        return self.fetch_one('''
            SELECT po.*, ot.name, ot.description, ot.required_items, ot.required_tools,
                   ot.difficulty, ot.category
            FROM player_orders po
            JOIN order_templates ot ON po.template_id = ot.id
            WHERE po.id = ?
        ''', (order_id,))
    
    def complete_order(self, order_id: int, quality: int, used_items: Dict, used_tools: Dict) -> bool:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            order = self.get_order_details(order_id)
            if not order:
                return False
            
            base_reward = order[17]  # base_reward –∏–∑ —à–∞–±–ª–æ–Ω–∞
            difficulty = order[18]   # difficulty –∏–∑ —à–∞–±–ª–æ–Ω–∞
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            quality_bonus = (quality / 100.0) * base_reward
            difficulty_bonus = (difficulty * 0.1) * base_reward
            final_reward = int(base_reward + quality_bonus + difficulty_bonus)
            
            # –†–∞—Å—á–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
            client_satisfaction = min(100, quality + (difficulty * 10))
            
            self.execute_query('''
                UPDATE player_orders 
                SET status = 'completed', 
                    quality = ?,
                    reward = ?,
                    completed_at = CURRENT_TIMESTAMP,
                    used_items = ?,
                    used_tools = ?,
                    client_satisfaction = ?
                WHERE id = ?
            ''', (quality, final_reward, json.dumps(used_items), json.dumps(used_tools), client_satisfaction, order_id))
            
            print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {quality}%, –Ω–∞–≥—Ä–∞–¥–∞: {final_reward}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return False
    
    def fail_order(self, order_id: int) -> bool:
        """–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–π"""
        try:
            self.execute_query(
                "UPDATE player_orders SET status = 'failed', completed_at = CURRENT_TIMESTAMP WHERE id = ?",
                (order_id,)
            )
            print(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –ø—Ä–æ–≤–∞–ª–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∞ –∑–∞–∫–∞–∑–∞: {e}")
            return False
    
    def cancel_order(self, order_id: int) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            self.execute_query(
                "UPDATE player_orders SET status = 'cancelled', completed_at = CURRENT_TIMESTAMP WHERE id = ?",
                (order_id,)
            )
            print(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: {e}")
            return False
    
    def get_player_order_history(self, player_id: int, limit: int = 10) -> List[Tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏–≥—Ä–æ–∫–∞"""
        return self.fetch_all('''
            SELECT po.id, ot.name, po.status, po.quality, po.reward, po.completed_at
            FROM player_orders po
            JOIN order_templates ot ON po.template_id = ot.id
            WHERE po.player_id = ? AND po.status IN ('completed', 'failed', 'cancelled')
            ORDER BY po.completed_at DESC
            LIMIT ?
        ''', (player_id, limit))
    
    def get_player_order_stats(self, player_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–≥—Ä–æ–∫–∞"""
        stats = {}
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_stats = self.fetch_one('''
            SELECT 
                COUNT(*) as total_orders,
                SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed,
                SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled,
                AVG(CASE WHEN status = 'completed' THEN quality ELSE NULL END) as avg_quality,
                SUM(CASE WHEN status = 'completed' THEN reward ELSE 0 END) as total_earned
            FROM player_orders 
            WHERE player_id = ?
        ''', (player_id,))
        
        if total_stats:
            stats = {
                "total_orders": total_stats[0] or 0,
                "completed": total_stats[1] or 0,
                "failed": total_stats[2] or 0,
                "cancelled": total_stats[3] or 0,
                "success_rate": (total_stats[1] / total_stats[0] * 100) if total_stats[0] > 0 else 0,
                "avg_quality": total_stats[4] or 0,
                "total_earned": total_stats[5] or 0
            }
        
        return stats
    
    def check_expired_orders(self) -> List[Tuple]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        return self.fetch_all('''
            SELECT po.id, po.player_id, ot.name
            FROM player_orders po
            JOIN order_templates ot ON po.template_id = ot.id
            WHERE po.status = 'active' AND po.deadline < CURRENT_TIMESTAMP
        ''')
    
    def add_custom_order(self, name: str, description: str, required_level: int, difficulty: int, 
                        base_reward: int, required_items: Dict, required_tools: Dict, 
                        time_limit: int, category: str) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–∫–∞–∑"""
        try:
            cursor = self.execute_query('''
                INSERT INTO order_templates (name, description, required_level, difficulty, base_reward,
                                           required_items, required_tools, time_limit, category)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (name, description, required_level, difficulty, base_reward,
                 json.dumps(required_items), json.dumps(required_tools), time_limit, category))
            
            order_id = cursor.lastrowid
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–∫–∞–∑: {name} (ID: {order_id})")
            return order_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return 0
    
    def init_default_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        existing_clients = self.fetch_all("SELECT COUNT(*) FROM clients")
        if existing_clients[0][0] > 0:
            return
        
        default_clients = [
            {
                "name": "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
                "preferences": '{"–∫–∞—á–µ—Å—Ç–≤–æ": 80, "—Å–∫–æ—Ä–æ—Å—Ç—å": 20, "—Ü–µ–Ω–∞": 60}',
                "base_reputation": 10,
                "favorite_category": "—Ä–µ–º–Ω–∏"
            },
            {
                "name": "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", 
                "preferences": '{"–∫–∞—á–µ—Å—Ç–≤–æ": 90, "—Å–∫–æ—Ä–æ—Å—Ç—å": 40, "—Ü–µ–Ω–∞": 30}',
                "base_reputation": 15,
                "favorite_category": "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"
            },
            {
                "name": "–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤",
                "preferences": '{"–∫–∞—á–µ—Å—Ç–≤–æ": 70, "—Å–∫–æ—Ä–æ—Å—Ç—å": 80, "—Ü–µ–Ω–∞": 50}',
                "base_reputation": 5,
                "favorite_category": "—Ä–µ–º–Ω–∏"
            }
        ]
        
        for client in default_clients:
            self.execute_query('''
                INSERT INTO clients (name, preferences, base_reputation, favorite_category)
                VALUES (?, ?, ?, ?)
            ''', (client["name"], client["preferences"], client["base_reputation"], client["favorite_category"]))
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(default_clients)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")