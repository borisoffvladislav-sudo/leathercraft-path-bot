#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–¢–ß –î–õ–Ø TUTORIAL.PY
–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤
"""

import os
import re

def apply_patch():
    print("üéØ –ù–ê–ß–ê–õ–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø TUTORIAL.PY")
    print("=" * 60)
    
    file_path = "routers/tutorial.py"
    backup_path = "routers/tutorial_backup.py"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as original:
            with open(backup_path, 'w', encoding='utf-8') as backup:
                backup.write(original.read())
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: routers/tutorial_backup.py")
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    # === –ü–†–ê–í–ö–ê 1: –ó–ê–ú–ï–ù–ê –ò–ú–ü–û–†–¢–û–í –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ù–°–¢–ê–ù–¢ ===
    print("\n1. –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤...")
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç TutorialDatabase –Ω–∞ Database
    content = content.replace(
        "from database.models import TutorialDatabase", 
        "from database.models import Database"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    sku_constants = '''
# === –°–ò–°–¢–ï–ú–ê –ê–†–¢–ò–ö–£–õ–û–í –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–û–í–ê–†–û–í ===

# –ê—Ä—Ç–∏–∫—É–ª—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
REQUIRED_TUTORIAL_SKUS = [
    "KNIFE_–ö–ê–ù–ù–û–ñ",  # –ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂
    "PUNCH_–í–´–°–ü–†–û",  # –í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏  
    "EDGE_–ú–£–õ–¨–¢–ò–¢",  # –ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1
    "MAT_–î–ï–®–†–ï–ú",    # –î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞
    "HW_–î–ï–®–§–£–†",     # –î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π
    "THREAD_–®–í–ï–ú–û–°"  # –®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏
]

# –ú–∞–ø–ø–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
SKU_TO_NAME = {
    "KNIFE_–ö–ê–ù–ù–û–ñ": "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–π –Ω–æ–∂",
    "PUNCH_–í–´–°–ü–†–û": "–í—ã—Å–µ—á–Ω—ã–µ –ø—Ä–æ–±–æ–π–Ω–∏–∫–∏", 
    "EDGE_–ú–£–õ–¨–¢–ò–¢": "–ú—É–ª—å—Ç–∏—Ç—É–ª 3 –≤ 1",
    "MAT_–î–ï–®–†–ï–ú": "–î–µ—à–µ–≤–∞—è —Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞",
    "HW_–î–ï–®–§–£–†": "–î–µ—à–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–º–Ω–µ–π",
    "THREAD_–®–í–ï–ú–û–°": "–®–≤–µ–π–Ω—ã–µ –ú–æ—Å–ù–∏—Ç–∫–∏"
}
'''
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ Database
    import_pattern = r"(from database\.models import Database\n)"
    content = re.sub(import_pattern, r"\1" + sku_constants + "\n", content)
    
    # === –ü–†–ê–í–ö–ê 2: –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò buy_item() ===
    print("2. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é buy_item() –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏...")
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é buy_item
    old_buy_item_pattern = r'async def buy_item\(callback: CallbackQuery, state: FSMContext\):.*?await callback\.answer\("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏", show_alert=True\)'
    
    new_buy_item = '''async def buy_item(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ callback data
        item_sku = callback.data.replace("buy_", "")
        print(f"üõí –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {item_sku}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º player_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        data = await state.get_data()
        player_id = data.get('player_id')
        
        if not player_id:
            db = Database()
            user = callback.from_user
            player_data = db.characters.get_active_player(user.id)
            if player_data:
                player_id = player_data[0]
                await state.update_data(player_id=player_id)
                print(f"üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω player_id: {player_id}")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        
        db = Database()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        item_data = db.shop.get_item_by_sku(item_sku)
        if not item_data:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        item_name = item_data[1]  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        item_price = item_data[2]  # –¶–µ–Ω–∞
        available_in_tutorial = item_data[3]  # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏
        if not available_in_tutorial:
            await callback.answer("üîí –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        player_balance = db.tutorial.get_player_balance(player_id)
        if player_balance < item_price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        if db.tutorial.has_item_in_tutorial(player_id, item_sku):
            await callback.answer("‚úÖ –Ø —É–∂–µ —ç—Ç–æ –∫—É–ø–∏–ª", show_alert=True)
            return
        
        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        new_balance = player_balance - item_price
        db.tutorial.update_player_balance(player_id, new_balance)
        db.tutorial.add_to_tutorial_inventory(player_id, item_sku, item_name)
        
        print(f"‚úÖ –ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä: {item_name} (SKU: {item_sku}) –∑–∞ {item_price} –º–æ–Ω–µ—Ç")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        await update_shop_category_message(callback, state, new_balance)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ buy_item: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏", show_alert=True)

async def update_shop_category_message(callback: CallbackQuery, state: FSMContext, new_balance: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"""
    try:
        data = await state.get_data()
        category = data.get('current_category', '–ù–æ–∂–∏')
        
        db = Database()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        items = db.shop.get_items_by_category(category)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        
        player_id = data.get('player_id')
        tutorial_inventory = db.tutorial.get_tutorial_inventory(player_id)
        purchased_skus = [item[0] for item in tutorial_inventory]
        
        for sku, name, price, available, image_path, durability in items:
            if sku in purchased_skus:
                builder.button(text=f"‚úÖ {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"already_bought_{sku}")
            elif not available:
                builder.button(text=f"üîí {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"locked_{sku}")
            elif new_balance < price:
                builder.button(text=f"‚ùå {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"no_money_{sku}")
            else:
                builder.button(text=f"üõí {name} - {price} –º–æ–Ω–µ—Ç", callback_data=f"buy_{sku}")
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop_menu")
        builder.adjust(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category}\\nüí∞ –ë–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\\n\\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {e}")'''
    
    content = re.sub(old_buy_item_pattern, new_buy_item, content, flags=re.DOTALL)
    
    # === –ü–†–ê–í–ö–ê 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò shop_exit() ===
    print("3. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é shop_exit() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º...")
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ shop_exit
    old_inventory_check = r'# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.*?has_all_required = all\(item in inventory_items for item in required_items\)'
    
    new_inventory_check = '''    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    purchased_skus = [item[0] for item in inventory]
    missing_skus = [sku for sku in REQUIRED_TUTORIAL_SKUS if sku not in purchased_skus]
    has_all_required = len(missing_skus) == 0
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    missing_items_text = ", ".join([SKU_TO_NAME.get(sku, sku) for sku in missing_skus]) if missing_skus else "–≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ"'''
    
    content = re.sub(old_inventory_check, new_inventory_check, content, flags=re.DOTALL)
    
    # === –ü–†–ê–í–ö–ê 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò show_shop_category() ===
    print("4. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_shop_category()...")
    
    # –ó–∞–º–µ–Ω—è–µ–º TutorialDatabase() –Ω–∞ Database() –≤ show_shop_category
    content = content.replace(
        "    tutorial_db = TutorialDatabase()",
        "    db = Database()"
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤
    content = content.replace("tutorial_db.get_shop_items_by_category", "db.shop.get_items_by_category")
    content = content.replace("tutorial_db.has_item_in_tutorial", "db.tutorial.has_item_in_tutorial")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
    old_loop_pattern = r'for item_name, price, available, image_path in items:'
    new_loop = '    for sku, name, price, available, image_path, durability in items:'
    content = content.replace(old_loop_pattern, new_loop)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Ü–∏–∫–ª–µ
    content = content.replace("item_name", "name")
    content = content.replace('f"buy_{item_name}"', 'f"buy_{sku}"')
    
    # === –ü–†–ê–í–ö–ê 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ===
    print("5. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è TutorialDatabase() –Ω–∞ Database()
    content = content.replace("TutorialDatabase()", "Database()")
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ tutorial_db –Ω–∞ db
    content = content.replace("tutorial_db.", "db.tutorial.")
    
    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
    print("6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(content)
    
    print("‚úÖ –§–∞–π–ª routers/tutorial.py —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    print("\nüìã –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    print("   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω TutorialDatabase –Ω–∞ Database")
    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è buy_item() –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SKU")
    print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è shop_exit() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º")
    print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_shop_category() –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏")
    print("   ‚úÖ –í—Å–µ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    
    print(f"\nüí° –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python bot.py")

if __name__ == "__main__":
    apply_patch()