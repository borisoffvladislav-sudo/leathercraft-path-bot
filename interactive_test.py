#!/usr/bin/env python3
"""
–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢–ï–† - –ø–æ—à–∞–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import sqlite3
from database.models import Database, TutorialDatabase

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    try:
        db = Database()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ game.db —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_tables_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü...")
    required_tables = ['players', 'tutorial_progress', 'tutorial_inventory', 'shop_items']
    
    try:
        conn = sqlite3.connect('game.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        existing_tables = [table[0] for table in cursor.fetchall()]
        
        for table in required_tables:
            if table in existing_tables:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
        conn.close()
        return all(table in existing_tables for table in required_tables)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def test_shop_items():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞...")
    try:
        tutorial_db = TutorialDatabase()
        categories = ["–ù–æ–∂–∏", "–ü—Ä–æ–±–æ–π–Ω–∏–∫–∏", "–¢–æ—Ä—Ü–±–∏–ª—ã", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "–§—É—Ä–Ω–∏—Ç—É—Ä–∞", "–•–∏–º–∏—è"]
        
        for category in categories:
            items = tutorial_db.get_shop_items_by_category(category)
            if items:
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}: {len(items)} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        return False

def run_interactive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü", test_tables_exist),
        ("–¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞", test_shop_items),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        result = test_func()
        results.append((test_name, result))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {status}: {test_name}")

if __name__ == "__main__":
    run_interactive_test()